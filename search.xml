<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python仅使用time库实现多个判断两个时间戳之间关系的操作</title>
    <url>/p/84ddeedc.html</url>
    <content><![CDATA[<h4 id="python仅使用time库实现多个判断两个时间戳之间关系的操作"><a href="#python仅使用time库实现多个判断两个时间戳之间关系的操作" class="headerlink" title="python仅使用time库实现多个判断两个时间戳之间关系的操作"></a>python仅使用time库实现多个判断两个时间戳之间关系的操作</h4><span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># tz_count表示当前时区与UTC0时区的时间差（秒）</span></span><br><span class="line"><span class="comment"># 判断两个时间戳是否是同一天 </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_today</span>(<span class="params">t1, t2, tz_count=<span class="number">28800</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>((<span class="built_in">int</span>(t1)+<span class="built_in">int</span>(tz_count))/<span class="number">86400</span>) == <span class="built_in">int</span>((<span class="built_in">int</span>(t2)+<span class="built_in">int</span>(tz_count))/<span class="number">86400</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断一个时间戳是否是另一个时间戳的第二天 </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_tomorrow</span>(<span class="params">today, tomorrow, tz_count=<span class="number">28800</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>((<span class="built_in">int</span>(today)+<span class="built_in">int</span>(tz_count))/<span class="number">86400</span>)+<span class="number">1</span> == <span class="built_in">int</span>((<span class="built_in">int</span>(tomorrow)+<span class="built_in">int</span>(tz_count))/<span class="number">86400</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取输入时间戳表示的那一天的开始时间戳</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">day_start</span>(<span class="params">timestamp, tz_count=<span class="number">28800</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>((<span class="built_in">int</span>(timestamp)+<span class="built_in">int</span>(tz_count))/<span class="number">86400</span>)*<span class="number">86400</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算两个时间戳中间差了多少天</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">day_between</span>(<span class="params">now, start, tz_count=<span class="number">28800</span></span>):</span><br><span class="line">    a = day_start(<span class="built_in">int</span>(start)) - day_start(<span class="built_in">int</span>(<span class="built_in">int</span>(now)+<span class="number">1</span>))</span><br><span class="line">    b = <span class="built_in">int</span>(a/<span class="number">86400</span>)</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"><span class="comment">#简单测试</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;当前时间戳: <span class="subst">&#123;<span class="built_in">int</span>(time.time())&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(is_today(<span class="number">1616945885.9678676</span>,<span class="number">1616863085</span>))</span><br><span class="line">    <span class="built_in">print</span>(is_tomorrow(<span class="number">1616935085</span>,<span class="number">1616949485</span>))</span><br><span class="line">    <span class="built_in">print</span>(day_between(time.time(),<span class="number">1616862208</span>)) </span><br><span class="line">    <span class="built_in">print</span>(day_start(time.time())) </span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python快速上手flask搭建api服务器</title>
    <url>/p/66e9cfb1.html</url>
    <content><![CDATA[<h4 id="python快速上手flask搭建api服务器"><a href="#python快速上手flask搭建api服务器" class="headerlink" title="python快速上手flask搭建api服务器"></a>python快速上手flask搭建api服务器</h4><p>&emsp;&emsp;安装Flask</p>
<p><code>pip install flask</code></p>
<p>&emsp;&emsp;新建python文件demo.py （文件名可以随便起）</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, json</span><br><span class="line"></span><br><span class="line">api = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@api.route(<span class="params"><span class="string">&#x27;/api1&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_api1</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;我是api1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@api.route(<span class="params"><span class="string">&#x27;/api2&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_api2</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;我是api2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    api.run()</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;使用python IDLE运行会报错，所以使用powershell或cmd运行脚本：</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/077bcf84743db0e88c16c648a5b219c4/20230318165302.png" alt="077bcf84743db0e88c16c648a5b219c4/20230318165302.png"></p>
<p>&emsp;&emsp;出现这些说明运行成功了，可以测试一下：</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/177fe9d1bce8ed2dcb727fba1b6aa74b/20230318165317.png" alt="177fe9d1bce8ed2dcb727fba1b6aa74b/20230318165317.png"></p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/d3fbc0cbfd8ea00966fe942dc9b6fddb/20230318165337.png" alt="d3fbc0cbfd8ea00966fe942dc9b6fddb/20230318165337.png"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python找出视频中画面切换，并剪裁出所有画面</title>
    <url>/p/dcd49b6b.html</url>
    <content><![CDATA[<h3 id="python找出视频中画面切换，并剪裁出所有画面"><a href="#python找出视频中画面切换，并剪裁出所有画面" class="headerlink" title="python找出视频中画面切换，并剪裁出所有画面"></a>python找出视频中画面切换，并剪裁出所有画面</h3><p>&emsp;&emsp;做剪辑时我们需要的素材通常是一段一段的画面，但是从网上找到的素材往往包含许多段画面，想要剪出每段画面，一般的解决方案就是使用剪辑软件，手动找到画面切换的地方，剪开然后保存，这里我尝试一种新的方案：使用<code>Python</code>中<a href="https://pypi.org/project/ImageHash/" title="ImageHash">ImageHash</a>和<a href="https://pypi.org/project/moviepy/" title="moviepy">moviepy</a>实现自动化剪辑，可以适用于批量生产素材。</p>
<p>​        首先需要安装Python库</p>
<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install ImageHash</span><br><span class="line">pip install moviepy</span><br><span class="line">pip install opencv-python</span><br></pre></td></tr></table></figure>



<p>&emsp;&emsp;视频中画面切换时，前后两帧的图像变化一般会很大，因此我们需要一个函数来判断视频中相邻的前后帧相似度：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">isSimilar</span>(<span class="params">img1, img2</span>):</span><br><span class="line"></span><br><span class="line">	<span class="comment"># OpenCV图片转换为PIL image</span></span><br><span class="line">    img1 = Image.fromarray(cv2.cvtColor(img1, cv2.COLOR_BGR2RGB))  </span><br><span class="line">    img2 = Image.fromarray(cv2.cvtColor(img2, cv2.COLOR_BGR2RGB)) </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 通过imagehash获取两个图片的平均hash值</span></span><br><span class="line">    n0 = imagehash.average_hash(img1) </span><br><span class="line">    n1 = imagehash.average_hash(img2) </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># hash值最小相差多少则判断为不相似，可以根据需要自定义</span></span><br><span class="line">    cutoff = <span class="number">7</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;目标帧hash平均值：<span class="subst">&#123;n0&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;后帧hash平均值：  <span class="subst">&#123;n1&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;hash差值：       <span class="subst">&#123;n0-n1&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> n0 - n1 &lt; cutoff:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;相似&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;不相似&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flag</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;判断帧相似度的函数有了，我们还需要一个函数遍历视频中的所有帧，并使用上面的函数判断前后帧是否相似：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sliceVideo</span>(<span class="params">clip, fps</span>):</span><br><span class="line">    im0 = <span class="string">&quot;&quot;</span>			<span class="comment"># 目标帧</span></span><br><span class="line">    start_time = <span class="number">0</span>      <span class="comment"># 片段开始时间</span></span><br><span class="line">    end_time = <span class="number">0</span>        <span class="comment"># 片段结束时间</span></span><br><span class="line">    success_durations = []	<span class="comment"># 成功片段时间列表</span></span><br><span class="line">    skip_durations = []	<span class="comment"># 排除片段时间列表</span></span><br><span class="line">    <span class="keyword">for</span> i,img <span class="keyword">in</span> <span class="built_in">enumerate</span>(clip.iter_frames(fps)):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>: im0 = img</span><br><span class="line">        time = (i) / fps</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;\n第<span class="subst">&#123;time&#125;</span>秒&#x27;</span>)</span><br><span class="line">        result = isSimilar(im0, img)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> result:	<span class="comment"># 结果为不相似</span></span><br><span class="line">            end_time = (i-<span class="number">1</span>) / fps</span><br><span class="line">            <span class="built_in">print</span>(start_time, end_time)</span><br><span class="line">            <span class="keyword">if</span> start_time == end_time:	<span class="comment"># 排除情况，开始时间和结束时间相同的话moviepy会报错；也可以根据需要筛选时长大于多少的片段</span></span><br><span class="line">                skip_durations.append([start_time, end_time])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                clip.subclip(start_time, end_time).write_videofile(<span class="string">f&quot;SUBCLIP-<span class="subst">&#123;i&#125;</span>.mp4&quot;</span>)</span><br><span class="line">                success_durations.append([start_time, end_time])</span><br><span class="line">            start_time = time</span><br><span class="line">        im0 = img</span><br><span class="line">    <span class="comment"># 前面的循环并没有包括视频中最后一段画面，因此需要在最后加上</span></span><br><span class="line">    end_time = clip.duration</span><br><span class="line">    <span class="keyword">if</span> start_time == end_time:</span><br><span class="line">        skip_durations.append([start_time, end_time])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        clip.subclip(start_time, end_time).write_videofile(<span class="string">f&quot;SUBCLIP-<span class="subst">&#123;i&#125;</span>.mp4&quot;</span>)</span><br><span class="line">        success_durations.append([start_time, end_time])</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> [success_durations, skip_durations]</span><br></pre></td></tr></table></figure>

<h5 id="源代码如下"><a href="#源代码如下" class="headerlink" title="源代码如下"></a>源代码如下</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> cv2 <span class="keyword">import</span> cv2 <span class="keyword">as</span> cv2</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> imagehash</span><br><span class="line"><span class="keyword">from</span> moviepy.editor <span class="keyword">import</span> VideoFileClip</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isSimilar</span>(<span class="params">img1, img2</span>):</span><br><span class="line"></span><br><span class="line">	<span class="comment"># OpenCV图片转换为PIL image</span></span><br><span class="line">    img1 = Image.fromarray(cv2.cvtColor(img1, cv2.COLOR_BGR2RGB))  </span><br><span class="line">    img2 = Image.fromarray(cv2.cvtColor(img2, cv2.COLOR_BGR2RGB)) </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 通过imagehash获取两个图片的平均hash值</span></span><br><span class="line">    n0 = imagehash.average_hash(img1) </span><br><span class="line">    n1 = imagehash.average_hash(img2) </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># hash值最小相差多少则判断为不相似，可以根据需要自定义</span></span><br><span class="line">    cutoff = <span class="number">7</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;目标帧hash平均值：<span class="subst">&#123;n0&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;后帧hash平均值：  <span class="subst">&#123;n1&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;hash差值：       <span class="subst">&#123;n0-n1&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> n0 - n1 &lt; cutoff:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;相似&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;不相似&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sliceVideo</span>(<span class="params">clip, fps</span>):</span><br><span class="line">    im0 = <span class="string">&quot;&quot;</span>			<span class="comment"># 目标帧</span></span><br><span class="line">    start_time = <span class="number">0</span>      <span class="comment"># 片段开始时间</span></span><br><span class="line">    end_time = <span class="number">0</span>        <span class="comment"># 片段结束时间</span></span><br><span class="line">    success_durations = []	<span class="comment"># 成功片段时间列表</span></span><br><span class="line">    skip_durations = []	<span class="comment"># 排除片段时间列表</span></span><br><span class="line">    <span class="keyword">for</span> i,img <span class="keyword">in</span> <span class="built_in">enumerate</span>(clip.iter_frames(fps)):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>: im0 = img</span><br><span class="line">        time = (i) / fps</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;\n第<span class="subst">&#123;time&#125;</span>秒&#x27;</span>)</span><br><span class="line">        result = isSimilar(im0, img)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> result:	<span class="comment"># 结果为不相似</span></span><br><span class="line">            end_time = (i-<span class="number">1</span>) / fps</span><br><span class="line">            <span class="built_in">print</span>(start_time, end_time)</span><br><span class="line">            <span class="keyword">if</span> start_time == end_time:	<span class="comment"># 排除情况，开始时间和结束时间相同的话moviepy会报错；也可以根据需要筛选时长大于多少的片段</span></span><br><span class="line">                skip_durations.append([start_time, end_time])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                clip.subclip(start_time, end_time).write_videofile(<span class="string">f&quot;SUBCLIP-<span class="subst">&#123;i&#125;</span>.mp4&quot;</span>)</span><br><span class="line">                success_durations.append([start_time, end_time])</span><br><span class="line">            start_time = time</span><br><span class="line">        im0 = img</span><br><span class="line">    <span class="comment"># 前面的循环并没有包括视频中最后一段画面，因此需要在最后加上</span></span><br><span class="line">    end_time = clip.duration</span><br><span class="line">    <span class="keyword">if</span> start_time == end_time:  <span class="comment"># 排除情况</span></span><br><span class="line">        skip_durations.append([start_time, end_time])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        clip.subclip(start_time, end_time).write_videofile(<span class="string">f&quot;SUBCLIP-<span class="subst">&#123;i&#125;</span>.mp4&quot;</span>)</span><br><span class="line">        success_durations.append([start_time, end_time])</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> success_durations, skip_durations</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    clip = VideoFileClip(<span class="string">&quot;demo.mp4&quot;</span>)</span><br><span class="line">    success, skip = sliceVideo(clip, clip.fps)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;成功片段：\n<span class="subst">&#123;success&#125;</span>\n\n排除片段：\n<span class="subst">&#123;skip&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>参考文章：<br><a href="https://blog.csdn.net/enter89/article/details/90293971">https://blog.csdn.net/enter89/article/details/90293971</a><br><a href="https://zhuanlan.zhihu.com/p/161530919">https://zhuanlan.zhihu.com/p/161530919</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>使用vscode开发Tampermonkey油猴脚本</title>
    <url>/p/a7645c8b.html</url>
    <content><![CDATA[<h2 id="使用vscode开发Tampermonkey油猴脚本"><a href="#使用vscode开发Tampermonkey油猴脚本" class="headerlink" title="使用vscode开发Tampermonkey油猴脚本"></a>使用vscode开发Tampermonkey油猴脚本</h2><p>最近尝试开发油猴脚本，但是油猴自带的编辑器确实让人一言难尽，找了很长时间，终于找到一个完美的解决方案。</p>
<p>油猴可以 <code>// @require ...</code>的方法引用外部js文件，如果要引用本地文件，需要在浏览器插件设置中允许油猴访问文件URL，步骤</p>
<ol>
<li>在浏览器地址栏输入：<code>edge://extensions</code>（新版Edge，chrome用户请将edge换成chrome）<span id="more"></span></li>
<li>找到Tampermonkey，点详细信息，打开<code>允许访问文件 URL</code></li>
</ol>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/eb43fc4c5cc7c6030e47f2726283282f/20230318164326.png" alt="20230318164326.png"></p>
<p>现在在油猴中新建一个脚本，在前面添加你引用的本地文件的路径，注意路径前面要加<code>file://</code>下面的默认代码就可以删了：</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/49f736629370193d39d967da2e905e86/20230318164716.png" alt="49f736629370193d39d967da2e905e86/20230318164716.png"></p>
<p>这时候就可以在vscode中愉快地写代码啦~ 当然，其他编辑器也是可以的</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/55085ce445afb0226014b35cb4f4e24b/20230318165236.png" alt="55085ce445afb0226014b35cb4f4e24b/20230318165236.png"></p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>油猴</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ rand()和srand()</title>
    <url>/p/dbeacd1a.html</url>
    <content><![CDATA[<p>rand() 的内部实现是用线性同余法做的，它不是真的随机数，因其周期特别长，故在一定的范围里可看成是随机的。</p>
<p>rand()返回一随机数值的范围在0至RAND_MAX 间。RAND_MAX的范围最少是在32767之间(int)。用unsigned int 双字节是65535，四字节是4294967295的整数范围。0~RAND_MAX每个数字被选中的机率是相同的。这些随机数在一定范围内呈周期分布，因此rand()生成的随机数是伪随机数（当你取的随机数数量大于数值范围时就会重复出现）</p>
<span id="more"></span>

<p>比如用这样一段代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot; %ld &quot;</span>, <span class="built_in">random</span>());</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>无论你执行多少遍，输出都是一样的</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/8b4a6886f93f4da8b6610dd7e975889a/20230318171459.png" alt="8b4a6886f93f4da8b6610dd7e975889a/20230318171459.png"></p>
<p>如果运行前使用srand()初始化，如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot; %d &quot;</span>, <span class="built_in">rand</span>());</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用time初始化，时间不同随机数种子不同，那么结果如下</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/dc4e451c6837a75470224de52ca9addd/20230318171519.png" alt="dc4e451c6837a75470224de52ca9addd/20230318171519.png"></p>
]]></content>
      <categories>
        <category>C++</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Clion 插件 &quot;C/C++ Single File Execution&quot; 修复cmake报错</title>
    <url>/p/9e023dbf.html</url>
    <content><![CDATA[<p>发现clion也有leetcode插件，终于不用苦于配置vscode的C++ debug环境了，当我在Clion上安装好leetcode插件做题时发现本地调试成了问题，不会只能提交leetcode评测吧，这样还不如在网页端打开leetcode，再用CodeRunner了</p>
<p>我查了一下解决方案，发现有C/C++ Single File Execution这个插件，可以在 Cmakelist添加可执行文件，从而构建和运行单个 c/cpp 文件，于是我满怀期待的下载来使用，结果在使用时却报错了，如图</p>
<span id="more"></span>

<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/f145df248c6c273d8f757cee9d8f1b14/20230318171620.png" alt="f145df248c6c273d8f757cee9d8f1b14/20230318171620.png"></p>
<p>看了一下原因好像是命名不符合规范，然后我就尝试改一下名字看看是否能修复，结果发现真的是名字的问题，改成字母的数字的组合是不会报错的</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/e39e5c95a39608d9b5c09738f995c8cf/20230318171635.png" alt="e39e5c95a39608d9b5c09738f995c8cf/20230318171635.png"></p>
<p>但是不能每次添加完都到到cmakelist文件中再手动修改一次吧，这样不如直接去修改cmakelist了。于是我找到C/C++ Single File Execution插件的开源地址，fork了一份，决定自己解决这个问题。</p>
<p>标点不能有？那就在插件读取文件名的时候把标点去掉。不能有中文字符？那就将中文转化为拼音，下面是主要修改的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">cn2Spell</span><span class="params">(String chinese)</span> &#123;</span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">pybf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">    <span class="type">char</span>[] arr = chinese.toCharArray();</span><br><span class="line">    <span class="type">HanyuPinyinOutputFormat</span> <span class="variable">defaultFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HanyuPinyinOutputFormat</span>();</span><br><span class="line">    defaultFormat.setCaseType(HanyuPinyinCaseType.LOWERCASE);</span><br><span class="line">    defaultFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c &gt; <span class="number">128</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                pybf.append(PinyinHelper.toHanyuPinyinStringArray(c, defaultFormat)[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (BadHanyuPinyinOutputFormatCombination e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pybf.append(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pybf.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** build target exeName according based on the configuration */</span></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">buildExeName</span><span class="params">(String exeName)</span> &#123;</span><br><span class="line">    String newExeName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* %FILENAME% %SAFEFILENAME% replacement */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> sourceFile.getNameWithoutExtension();</span><br><span class="line">    <span class="comment">/* 将汉字转化为拼音, 清除所有符号, 只留下字母、数字、汉字3类 */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">safeFileName</span> <span class="operator">=</span> cn2Spell(fileName).replaceAll(<span class="string">&quot;[\\pP\\p&#123;Punct&#125;]&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    newExeName = exeName.replace(SingleFileExecutionConfig.EXECUTABLE_NAME_FILENAME, fileName )</span><br><span class="line">            .replace(SingleFileExecutionConfig.EXECUTABLE_NAME_SAFEFILENAME, safeFileName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newExeName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改完之后打包安装，完美！</p>
<p>这是修改后的插件自动添加的语句，cmake没有报错</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/5261c9df1112a74f53a6e3406e1004e0/20230318171651.png" alt="5261c9df1112a74f53a6e3406e1004e0/20230318171651.png"></p>
<p>源文件的main函数旁边也显示了小三角可以选择编译运行或debug。</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/3ed90b1292cda529242c0536463ed58d/20230318171714.png" alt="3ed90b1292cda529242c0536463ed58d/20230318171714.png"></p>
<blockquote>
<p>修改后的插件项目地址</p>
<p><a href="https://github.com/lorzzn/SingleFileExecutionPlugin">lorzzn/SingleFileExecutionPlugin</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Clion插件</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Clion插件</tag>
      </tags>
  </entry>
  <entry>
    <title>parallels虚拟机试用过期后重新申请14天试用</title>
    <url>/p/d16502d.html</url>
    <content><![CDATA[<p>我pd17上的win10突然不能联网了，因为这个win10虚拟机上没有什么重要文件，所以我删除了它，打算再新建一个win10虚拟机看看能不能解决问题。由于我的pd17是无限试用版，在我新建完一个新的win10虚拟机后，它提醒我试用到期了，PD Runner也不能用了。</p>
<span id="more"></span>

<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/a323e14f708a143e39b6a0e26b999fe9/20230318171804.png" alt="a323e14f708a143e39b6a0e26b999fe9/20230318171804.png"></p>
<p>难道我的电脑只能付费了吗？奈何我贫苦大学生一个，囊中羞涩，暂时拿不出购买pd许可证的钱，如果资金允许还是可以考虑购买许可证支持一下pd。没办法，我尝试了卸载重装，不行，尝试安装pd16报错了，应该是pd16不支持Monterey，我又尝试了vmware fusion，体验后感觉vm性能实在太差，根本不能和pd比。</p>
<p>在几番尝试无果后，最后祭出大招！研究了pd申请试用的规则后，发现它的试用应该是和mac序列号有关，我的电脑是黑苹果，更换序列号很简单，然后我就 打开了OpenCore Configurator，打开oc引导的config文件</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/fbac7364e8da9fcd0d20099f208ce50f/20230318171916.png" alt="fbac7364e8da9fcd0d20099f208ce50f/20230318171916.png"></p>
<p>根据上面的步骤，第3步点击后选择与原来相同的机型，就可以生成一个新的序列号</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/1f627a5bbe4b29588517caa947b092c1/20230318171948.png" alt="1f627a5bbe4b29588517caa947b092c1/20230318171948.png"></p>
<p>检查生成的序列号有没有被使用，选择一个没有被使用的序列号，然后把ProcessorType改成0</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/8bce4c0558044c37034f018a5361a2ef/20230318172024.png" alt="8bce4c0558044c37034f018a5361a2ef/20230318172024.png"></p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/94bced8e7367e50ce6b0c8d83feac33a/20230318172044.png" alt="94bced8e7367e50ce6b0c8d83feac33a/20230318172044.png"></p>
<p>command+s保存，为了保险起见我把pd17先卸载了，然后重启电脑再重新安装pd17，我又重新注册了一个pd账号，登录后又可以申请试用了！</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/2f146a0ec2636ebad0d81176ce00bcfe/20230318172104.png" alt="2f146a0ec2636ebad0d81176ce00bcfe/20230318172104.png"></p>
<p>注意更换序列号之后iCloud和AppStore需要重新登录，一些付费软件可能也要重新激活。</p>
]]></content>
      <categories>
        <category>macos</category>
      </categories>
      <tags>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title>使用GitHub搭建网站过程记录</title>
    <url>/p/d2fed413.html</url>
    <content><![CDATA[<p>使用GitHub pages搭建个人网站、博客等等（静态）。</p>
<p>将网站托管到GitHub，稳定性很高，不用买服务器，也不需要维护，真香！</p>
<p>下面我对这一过程做简略总结。</p>
<span id="more"></span>

<h2 id="1、登录GitHub账号，新建仓库"><a href="#1、登录GitHub账号，新建仓库" class="headerlink" title="1、登录GitHub账号，新建仓库"></a>1、登录GitHub账号，新建仓库</h2><p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/a500ea9c167101ae1711386763a686c0/20230318170913.png" alt="a500ea9c167101ae1711386763a686c0/20230318170913.png"></p>
<h2 id="配置新仓库"><a href="#配置新仓库" class="headerlink" title="配置新仓库"></a>配置新仓库</h2><p>这里有几点需要注意：</p>
<ul>
<li>1、”Repository name” 需要设置为<code>用户名.gtihub.io</code></li>
<li>2、选择”Public”</li>
</ul>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/e55849fe5825c837362027967c168528/20230318170938.png" alt="e55849fe5825c837362027967c168528/20230318170938.png"></p>
<ul>
<li>3、最后”Initialize this repository with” 这里把 “Add a README file” 选上，如图</li>
</ul>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/f605eb1388ccedf74f7091b84e071685/20230318171007.png" alt="f605eb1388ccedf74f7091b84e071685/20230318171007.png"></p>
<ul>
<li>最后点击”Create repository” 即可</li>
<li>这时就已经可以使用<code>用户名.girhub.io</code>访问了</li>
</ul>
<h2 id="3、设置Github-Pages主题（可选）"><a href="#3、设置Github-Pages主题（可选）" class="headerlink" title="3、设置Github Pages主题（可选）"></a>3、设置Github Pages主题（可选）</h2><p>上一步完成之后就会跳转到这个页面，然后点”Settings” 按钮，如图</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/9f25043af86504a1d9fe62084108cc4f/20230318171051.png" alt="9f25043af86504a1d9fe62084108cc4f/20230318171051.png"></p>
<p>在新的页面中往下滑，找到”GitHub Pages”，如图，点击蓝色链接</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/5ecc9d831183aa9dc8f19d71eaea0c11/20230318171138.png" alt="5ecc9d831183aa9dc8f19d71eaea0c11/20230318171138.png"></p>
<p>这里可以修改主题</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/c90651278670209e2fd318fae35ee0ba/20230318171203.png" alt="c90651278670209e2fd318fae35ee0ba/20230318171203.png"></p>
<p>选择主题后，提交修改</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/757733bc8faaf36d48d59b77964ed870/20230318171243.png" alt="757733bc8faaf36d48d59b77964ed870/20230318171243.png"></p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/a904874a9549df7d6789d4ef3d63a04d/20230318171351.png" alt="a904874a9549df7d6789d4ef3d63a04d/20230318171351.png"></p>
<h2 id="4、克隆项目到本地进行开发"><a href="#4、克隆项目到本地进行开发" class="headerlink" title="4、克隆项目到本地进行开发"></a>4、克隆项目到本地进行开发</h2><p>终端中输入指令即可，这里的”用户名”要修改为你自己的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/用户名/用户名.github.io.git</span><br></pre></td></tr></table></figure>

<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/982f4fc8cbb5077b45d766a311cc7b86/20230318171415.png" alt="982f4fc8cbb5077b45d766a311cc7b86/20230318171415.png"></p>
<p>需要了解的是Pages只支持静态网页</p>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>网站</tag>
      </tags>
  </entry>
  <entry>
    <title>使用archinstall安装Arch时自定义btrfs子卷的方法</title>
    <url>/p/63e30c18.html</url>
    <content><![CDATA[<p>Arch最新的安装镜像附带了一个简单的安装工具<code>archinstall</code>，现在还在开发和完善中，还是有一些bug，不过不是很严重，但是用这个工具安装arch的确要方便不少。我很喜欢这个工具，相比手动敲命令安装arch，这个工具用起来简直太爽了。但是美中不足的是，目前的版本选择分区时不能自定义btrfs子卷。</p>
<p>我研究了代码后，找到了一种自定义btrfs子卷的方法，现在已经成功安装，先来展示一下</p>
<span id="more"></span>

<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/a9a0f37b866be3358c59f07cd9a7ec80/20230318165823.png" alt="a9a0f37b866be3358c59f07cd9a7ec80/20230318165823.png"></p>
<p>这是我的实体机，@子卷挂在根目录，@home挂载/home，@root挂载/root …</p>
<p>下面我用虚拟机演示如何实现这一效果</p>
<h2 id="u盘启动安装系统"><a href="#u盘启动安装系统" class="headerlink" title="u盘启动安装系统"></a>u盘启动安装系统</h2><p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/aabc7f26817ce1759dee3658d443730d/20230318165837.png" alt="aabc7f26817ce1759dee3658d443730d/20230318165837.png"></p>
<h2 id="修改pacman源"><a href="#修改pacman源" class="headerlink" title="修改pacman源"></a>修改pacman源</h2><p>archinstall启动时会自动更新仓库，换成国内源速度会快一些，终端输入<code>vim /etc/pacman.d/mirrorlist</code>，把里面的东西全都删掉，加上阿里的源：<code>Server = http://mirrors.aliyun.com/archlinux/$repo/os/$arch</code>，然后<code>pacman -Syy</code>更新一下仓库。</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/fd0e6e58fd84f14b1b968d9690115dc1/20230318165852.png" alt="fd0e6e58fd84f14b1b968d9690115dc1/20230318165852.png"></p>
<h2 id="新建分区，可以用cfdisk工具"><a href="#新建分区，可以用cfdisk工具" class="headerlink" title="新建分区，可以用cfdisk工具"></a>新建分区，可以用cfdisk工具</h2><p>选择gpt然后分一下区，我这里是虚拟机仅供参考，实体机操作时要确定分区是否正确，避免数据丢失，修改完后选择write保存，然后按q退出</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/c64fbbb118689357b6df96ed5fc3f703/20230318165933.png" alt="c64fbbb118689357b6df96ed5fc3f703/20230318165933.png"></p>
<p>完成后lsblk应该是这样</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/744186e34f6acff674b07b0ce1af8bbc/20230318170025.png" alt="744186e34f6acff674b07b0ce1af8bbc/20230318170025.png"></p>
<h2 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h2><p>efi格式化为fat32，另一个分区格式化为btrfs，用于安装系统</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/919ac15cb1c4efea1d33718f0fbe2986/20230318170226.png" alt="919ac15cb1c4efea1d33718f0fbe2986/20230318170226.png"></p>
<p><code>lsblk -f</code>查看一下</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/7c9da858506253386c81e886d64f3408/20230318170302.png" alt="7c9da858506253386c81e886d64f3408/20230318170302.png"></p>
<h2 id="挂载分区，创建子卷"><a href="#挂载分区，创建子卷" class="headerlink" title="挂载分区，创建子卷"></a>挂载分区，创建子卷</h2><p>接下来就开始创建和挂载分区了 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /mnt/btrfs-root	<span class="comment"># btrfs分区根目录，用来创建和管理子卷</span></span><br><span class="line"><span class="built_in">mkdir</span> /mnt/archinstall	<span class="comment"># 这个路径名不能改，archinstall工具一会要安装到这个路径下</span></span><br><span class="line"></span><br><span class="line">mount /dev/vda2 /mnt/btrfs-root -o subvol=/	<span class="comment"># 把btrfs分区挂载好</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /mnt/btrfs-root	<span class="comment"># 进到btrfs根</span></span><br><span class="line"></span><br><span class="line">btrfs su c @	 	<span class="comment"># 创建系统根目录子卷</span></span><br><span class="line">btrfs su c @home   	<span class="comment"># 创建home子卷</span></span><br><span class="line">btrfs su c @root 	<span class="comment"># 创建root子卷</span></span><br><span class="line">btrfs su c @<span class="built_in">log</span> 	<span class="comment"># 创建日志子卷</span></span><br><span class="line"><span class="comment"># 可以创建更多其他子卷用来挂载，这里仅创建这几个作演示</span></span><br><span class="line"></span><br><span class="line">mount /dev/vda2 /mnt/archinstall -o subvol=/@	<span class="comment"># 挂载系统根目录子卷</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> /mnt/archinstall/boot			<span class="comment"># 创建挂载点目录，别忘了boot目录用来挂载efi</span></span><br><span class="line"><span class="built_in">mkdir</span> /mnt/archinstall/home			</span><br><span class="line"><span class="built_in">mkdir</span> /mnt/archinstall/root</span><br><span class="line"><span class="built_in">mkdir</span> -p /mnt/archinstall/var/log</span><br><span class="line"></span><br><span class="line">mount /dev/vda1 /mnt/archinstall/boot	<span class="comment"># 挂载各子卷</span></span><br><span class="line">mount /dev/vda2 /mnt/archinstall/home -o subvol=/@home</span><br><span class="line">mount /dev/vda2 /mnt/archinstall/root -o subvol=/@root</span><br><span class="line">mount /dev/vda2 /mnt/archinstall/var/log -o subvol=/@<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">lsblk		<span class="comment"># 上面操作完成后检查以下挂载情况，参考下图</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/f6cfbb4534d7bbb093d334aee7855b71/20230318170323.png" alt="f6cfbb4534d7bbb093d334aee7855b71/20230318170323.png"></p>
<h2 id="修改archinstall代码"><a href="#修改archinstall代码" class="headerlink" title="修改archinstall代码"></a>修改archinstall代码</h2><p>上面确认没问题后，接下来修改archinstall代码，让他支持安装到btrfs子卷，不然的话会报错 (archinstall-2.3.0) ！</p>
<p>路径有点长请看截图</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/635733fe5bd1ed56a8ea916c26464724/20230318170421.png" alt="635733fe5bd1ed56a8ea916c26464724/20230318170421.png"></p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/106e3e7fdfeed6c6367b6e37cbdc9af8/20230318170442.png" alt="106e3e7fdfeed6c6367b6e37cbdc9af8/20230318170442.png"></p>
<p>把红框框住的代码<code>self.path</code>改为<code>self.mountpoint</code>，如下，修改完之后保存退出；</p>
<p>如果使用<code>self.path</code>btrfs分区子卷自带的标识会导致读不到分区信息，就会导致archinstall崩溃，改为mountpoint通过挂载点读取分区信息就不会有问题</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/5cb34583b1fecda845e4b2b864902f2a/20230318170506.png" alt="5cb34583b1fecda845e4b2b864902f2a/20230318170506.png"></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>准备工作就已经完成了，下面就开始进行安装了，终端输入archinstall运行安装脚本</p>
<ul>
<li>1、键盘语言：回车使用默认-us</li>
</ul>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/07cfb4869bf7ebdb2bf58376bd532a12/20230318170542.png" alt="07cfb4869bf7ebdb2bf58376bd532a12/20230318170542.png"></p>
<ul>
<li>2、地区：输入11选择中国，这里用来配置镜像源</li>
</ul>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/100251eb350a94992979b614bbb19628/20230318170606.png" alt="100251eb350a94992979b614bbb19628/20230318170606.png"></p>
<ul>
<li>3、选择硬盘：我们之前配置好了，这里直接回车跳过，下一个询问也直接回车跳过</li>
</ul>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/1dbb5aa040d24daa80c86c6cbfff240e/20230318170626.png" alt="1dbb5aa040d24daa80c86c6cbfff240e/20230318170626.png"></p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/c76e0b7b631bb78eb1fbf97c27008a0b/20230318170646.png" alt="c76e0b7b631bb78eb1fbf97c27008a0b/20230318170646.png"></p>
<ul>
<li><p>4、是否使用grub：y - 是</p>
</li>
<li><p>5、是否启用zram：y - 是</p>
</li>
<li><p>6、主机名：自定义</p>
</li>
<li><p>7、root密码留空，下一步创建sudo账户</p>
</li>
<li><p>8、创建sudo账户，输入密码</p>
</li>
</ul>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/416faeacbb789468054f861311604238/20230318170734.png" alt="416faeacbb789468054f861311604238/20230318170734.png"></p>
<p>下面的就简单了，我简单描述一下。</p>
<p>下一步选择0安装桌面环境，选择一个桌面环境，选择显卡声卡驱动，这些都是根据自己电脑的情况进行选择 。</p>
<p>后面选择内核使用默认即可，然后添加自定义包，安装networkmanager，输入时区Asia/Shanghai，启用网络校时。最后就会来到确认界面，检查以下没有问题的话就可以回车安装了，安装时会下载包，请确保网络通畅，然后等待安装完成</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/79b6af1c1edb7c118df5cfe3ab65bf32/20230318170754.png" alt="79b6af1c1edb7c118df5cfe3ab65bf32/20230318170754.png"></p>
<p>安装完成后会提示你是否chroot切换到刚刚安装的系统进行配置，可以根据自己的需求选择</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/f69180efb994386257a3a4ff6cc0f293/20230318170810.png" alt="f69180efb994386257a3a4ff6cc0f293/20230318170810.png"></p>
<p>确认安装完成后，就可以重启电脑啦，电脑会自动进入到刚刚安装的arch</p>
<h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/6a5f4563c8ea02ab879009ff488c11d5/20230318170833.png" alt="6a5f4563c8ea02ab879009ff488c11d5/20230318170833.png"></p>
<p>进入系统，检查一下各个子卷挂载情况，如下图</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/d93cd3baf2dd62ff6645cfd224d32aa7/20230318170854.png" alt="d93cd3baf2dd62ff6645cfd224d32aa7/20230318170854.png"></p>
<p><strong>The End</strong></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>archlinux</tag>
      </tags>
  </entry>
  <entry>
    <title>双击command运行时找不到当前目录的文件</title>
    <url>/p/5dbf8570.html</url>
    <content><![CDATA[<p>明明当前目录下有main.py 这个文件，新建一个command文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 main.py </span><br><span class="line">open -a /Applications/Typora.app newpost.md</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>双击运行时却提示如下（找不到main.py）</p>
<span id="more"></span>

<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/f41b22850d1fe44168ef26ba72e90e4c/20230318171439.png" alt="f41b22850d1fe44168ef26ba72e90e4c/20230318171439.png"></p>
<h2 id="原因和解决方法"><a href="#原因和解决方法" class="headerlink" title="原因和解决方法"></a>原因和解决方法</h2><p>双击运行command文件时没有进入到文件所在目录，在运行脚本前加上<code>cd &quot;$(dirname &quot;$0&quot;)&quot;</code> 就好了，如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(dirname <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>&quot;</span></span><br><span class="line">python3 main.py </span><br><span class="line">open -a /Applications/Typora.app newpost.md</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>macos</category>
      </categories>
      <tags>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title>联想 Yoga720 15黑苹果备忘录</title>
    <url>/p/6e68a89e.html</url>
    <content><![CDATA[<p>为了让我的电脑吃上黑苹果，我也是折腾了一两个星期，后续又修复了一些bug，现在除了一些无解和比较难解决的问题，比如独显，指纹，airdrop（需要换网卡）和雷电3之外，其他的都可以正常使用，可以认为是很完美。</p>
<span id="more"></span>

<p>黑苹果使用了一段时间，总结一下让我感觉很爽的点：系统实在是好用，苹果的icloud服务配合我的iPhone，iPad用起来真的舒服，虽然隔空投送不能用，但是接力可以用，可以体验到Mac接电话，收短信，剪切板同步等功能，使用起来简直不要太爽。Mac系统打代码也很舒适，开发环境配置起来相比win，linux要简单很多。</p>
<p>然后介绍一下不爽的点吧：使用中存在的问题也很影响体验，首先独显不能驱动，只靠一个核显处理，系统动画有时会卡顿，尤其是edge浏览器在调节窗口大小时，ps，ae的性能更是很差；然后Mac系统很占存储，系统加快照都是动不动几十G的占用，硬盘空间分配起来实在拮据。默认1080p在笔记本上显示太小，强制开启hidpi后因为不是真正的高分屏，文字和图标在移动时会跳动，看起来也很不舒服。主要也是因为这些问题，我的Mac系统在刚装好用了大概一个星期后，就基本上吃灰了，现在打算删掉了，准备叛逃Arch了🤫。删掉之前在博客做一个备份。</p>
<h2 id="我的电脑配置"><a href="#我的电脑配置" class="headerlink" title="我的电脑配置"></a>我的电脑配置</h2><p>联想yoga720-15ikb</p>
<ul>
<li><p>i5-7300hq（HD630）</p>
</li>
<li><p>Gtx1050 2gb（禁用）</p>
</li>
<li><p>Intel 760p 1tb</p>
</li>
<li><p>2 x 8gb Hynix ddr4 2133Mhz</p>
</li>
<li><p>Intel wireless-AC 8265</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/556b483625fd10c9dac640adfd880c91/20230318165514.png" alt="556b483625fd10c9dac640adfd880c91/20230318165514.png"></p>
</li>
</ul>
<h2 id="BIOS设置"><a href="#BIOS设置" class="headerlink" title="BIOS设置"></a>BIOS设置</h2><ul>
<li>SATA Controller mode: AHCI </li>
<li>Intel Virtual Technology: Enabled （同时config.plist修改DisableIoMapper = Yes）</li>
<li>Thunderbolt Device Boot Support: Disabled</li>
<li>Intel Platform Trust Technology: Disabled</li>
<li>Intel SGX: Disabled</li>
<li>Secure Boot: Disabled</li>
<li>Boot Mode: UEFI</li>
<li>CfgLock: 关闭 （比较有挑战 <a href="https://www.reddit.com/r/hackintosh/comments/hz2rtm/cfg_lockunlocking_alternative_method/">参考教程</a>）</li>
</ul>
<h2 id="系统和引导版本"><a href="#系统和引导版本" class="headerlink" title="系统和引导版本"></a>系统和引导版本</h2><p>Monterey 12.0.1、opencore 0.7.4</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/896cf430dd52f1057b5448a37d3dee80/20230318165559.png" alt="896cf430dd52f1057b5448a37d3dee80/20230318165559.png"></p>
<h2 id="正常实现的功能"><a href="#正常实现的功能" class="headerlink" title="正常实现的功能"></a>正常实现的功能</h2><ul>
<li><p>触摸板、触摸屏、键盘</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/80c270ab5bdcb30f240d011c4150321d/20230318165625.png" alt="80c270ab5bdcb30f240d011c4150321d/20230318165625.png"></p>
</li>
<li><p>播放，麦克风</p>
</li>
<li><p>摄像头</p>
</li>
<li><p>usb</p>
</li>
<li><p>雷电3（需开机前插入）</p>
</li>
<li><p>音量、亮度快捷键</p>
</li>
<li><p>合盖锁定、电源键锁定</p>
</li>
<li><p>电源键合盖睡眠正常</p>
</li>
<li><p>Wi-Fi（使用Airportitlwm驱动 <a href="https://github.com/OpenIntelWireless/itlwm">GitHub</a>）</p>
</li>
<li><p>蓝牙</p>
</li>
<li><p>睿频</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/933718181db9b0598535f47d106e7dfe/20230318165712.png" alt="933718181db9b0598535f47d106e7dfe/20230318165712.png"></p>
</li>
<li><p>GPU（核显）</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/135b37b2fd6dc5689ad3970c0b7cccd3/20230318165756.png" alt="135b37b2fd6dc5689ad3970c0b7cccd3/20230318165756.png"></p>
</li>
<li><p>音量快捷键，亮度快捷键正常；锁屏快捷键和截屏快捷键可以使用BetterTouchTool软件实现。</p>
</li>
</ul>
<h2 id="系统优化和经验"><a href="#系统优化和经验" class="headerlink" title="系统优化和经验"></a>系统优化和经验</h2><h3 id="解决发热"><a href="#解决发热" class="headerlink" title="解决发热"></a>解决发热</h3><p>使用时发热较大，目前使用 <a href="https://github.com/sicreative/VoltageShift">VoltageShift</a> 解决，参考<a href="https://bbs.pcbeta.com/viewthread-1807297-1-1.html">【续航】用VoltageShift降低cpu和gpu电压已延长续航，已测试可行</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./voltageshift info（查看现有cpu，gpu电压及功耗状态）</span><br><span class="line">./voltageshift offset -125 -100 -125（降低 CPU by 125mv, GPU by 100mv and Cache by 125mv，降低幅度可以自行调整）</span><br><span class="line"><span class="built_in">sudo</span> ./voltageshift buildlaunchd -125 -100 -125 0 0 0 60（设置系统每次启动后及每一小时检查并设置一次电压 CPU -125mv, GPU -100mv and Cache -125mv，建议在上一条设置后运行以下电脑以基本确定降低的电压幅度不会影响系统运行 ）</span><br><span class="line">./voltageshift removelaunchd(如果不想降低电压了或者降得太多导致down机了，可以去除所有电压相关设置，恢复默认）</span><br></pre></td></tr></table></figure>

<h3 id="开启hidpi"><a href="#开启hidpi" class="headerlink" title="开启hidpi"></a>开启hidpi</h3><p><a href="https://github.com/xzhih/one-key-hidpi">one-key-hidpi</a></p>
<h3 id="开启睿频"><a href="#开启睿频" class="headerlink" title="开启睿频"></a>开启睿频</h3><p><a href="https://github.com/stevezhengshiqi/one-key-cpufriend">one-key-cpufriend</a></p>
<h3 id="Mac软件下载"><a href="#Mac软件下载" class="headerlink" title="Mac软件下载"></a>Mac软件下载</h3><p><a href="https://macwk.com/">MacWk - 精品mac软件下载</a></p>
<p><a href="https://www.foxmac.com/">赤狐Mac_Mac软件免费下载</a></p>
<p><a href="https://macdrop.net/">MacDrop</a></p>
<h3 id="触摸板"><a href="#触摸板" class="headerlink" title="触摸板"></a>触摸板</h3><p>[VoodooI2C触摸板驱动教程 | 望海之洲 (penghubingzhou.cn)](<a href="https://www.penghubingzhou.cn/2019/01/06/VoodooI2C">https://www.penghubingzhou.cn/2019/01/06/VoodooI2C</a> DSDT Edit/)</p>
<p><a href="https://bbs.pcbeta.com/viewthread-1797378-1-1.html">【积谷于此，以至四方】黑苹果i2c触摸驱动教程（第二版）（20190503更新六代相关）-远景论坛-微软极客社区 (pcbeta.com)</a></p>
<p><a href="https://blog.gzxiaobai.cn/post/%E7%94%A8%E7%83%AD%E8%A1%A5%E4%B8%81%E4%BF%AE%E7%90%86%E4%BD%A0%E7%9A%84%E8%A7%A6%E6%91%B8%E6%9D%BF%EF%BC%88TouchPad-Hotpatch%EF%BC%89">用热补丁修理你的触摸板（TouchPad-Hotpatch） | 神楽小白(GZ小白)的部落阁 (gzxiaobai.cn)</a></p>
<h3 id="一些其他工具"><a href="#一些其他工具" class="headerlink" title="一些其他工具"></a>一些其他工具</h3><p><a href="https://github.com/corpnewt/ProperTree">ProperTree</a></p>
<p><a href="https://github.com/corpnewt/GenSMBIOS">GenSMBIOS</a></p>
<p><a href="https://github.com/quynkk5/GenI2C">GenI2C</a></p>
<h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p><a href="https://github.com/lorzzn/Lenovo-yoga720-Hackintoshi">Lenovo-yoga720-Hackintoshi</a></p>
]]></content>
      <categories>
        <category>黑苹果</category>
      </categories>
      <tags>
        <tag>黑苹果</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Expose docker daemon</title>
    <url>/p/5da216d3.html</url>
    <content><![CDATA[<p>创建文件<code>/etc/docker/daemon.json</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&#x27;&#123;\n\t&quot;hosts&quot;: [&quot;tcp://0.0.0.0:2375&quot;, &quot;unix:///var/run/docker.sock&quot;]\n&#125;&#x27;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>创建文件<code>/etc/systemd/system/docker.service.d/override.conf</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/systemd/system/docker.service.d</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;[Service]\nExecStart=\nExecStart=/usr/bin/dockerd&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/systemd/system/docker.service.d/override.conf</span><br></pre></td></tr></table></figure>

<p>重新加载systemd daemon</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<p>重启docker daemon</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux wine使用Windows版docker</title>
    <url>/p/f3e98e4f.html</url>
    <content><![CDATA[<p>wine我就不多介绍了，本篇文章主要是介绍如何在wine下使用Windows版docker。原因就是有些windows app有使用docker的需求，但是在wine下运行win版docker好像很难：win版docker desktop依赖wsl2，wine是没有wsl功能的，故此方案直接放弃；旧版的DockerToolbox呢？DockerToolbox需要安装VirtualBox，这就需要在linux下用wine运行vbox，然后再用vbox创建linux虚拟机运行boot2docker……，这个方案虽然理论可行，但是感觉很不值得，这样一套下来，又是转译又是虚拟，性能不知道要损失多少，所以这个方案我就不尝试了。有没有其他更好的方案呢？我摸索了一下，发现了另一种非常好的方案。</p>
<span id="more"></span>

<h2 id="docker-Expose-daemon"><a href="#docker-Expose-daemon" class="headerlink" title="docker Expose daemon"></a>docker Expose daemon</h2><p>docker Expose daemon功能可以将 <a href="https://docs.docker.com/engine/reference/commandline/dockerd/#description">dockerd</a> api开放到<code>hostip:2375</code>上，教程参考 <a href="https://lorzzn.com/p/5da216d3.html">Linux Expose docker daemon</a> 。</p>
<p>完成后可以通过<code>curl http://localhost:2375/version</code>测试</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/90e495ac5ff01b9d77e3d51f8b51a201/20230318173315.png" alt="90e495ac5ff01b9d77e3d51f8b51a201/20230318173315.png"></p>
<h2 id="下载安装windows版本docker"><a href="#下载安装windows版本docker" class="headerlink" title="下载安装windows版本docker"></a>下载安装windows版本docker</h2><p>前往 <a href="https://download.docker.com/win/static/stable/x86_64/">https://download.docker.com/win/static/stable/x86_64/</a> 下载最新版docker。将其解压到<code>~/.wine/drive_c/bin</code></p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/e2888d2a20541d539f13448597f20809/20230318173333.png" alt="e2888d2a20541d539f13448597f20809/20230318173333.png"></p>
<h2 id="配置wine的环境变量"><a href="#配置wine的环境变量" class="headerlink" title="配置wine的环境变量"></a>配置wine的环境变量</h2><p><code>wine regedit</code> 启动wine注册表编辑器，前往如下路径，这里的项目就是wine的环境变量</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/857bb7394d340f5bc7ca71dd8437e3ad/20230318173345.png" alt="857bb7394d340f5bc7ca71dd8437e3ad/20230318173345.png"></p>
<p>修改PATH变量，在最后添加<code>;C:\bin</code> ，这是docker.exe存放的路径</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/b82c979ccfdca1f4add6e30c0f3f644e/20230318173410.png" alt="b82c979ccfdca1f4add6e30c0f3f644e/20230318173410.png"></p>
<p>然后右键空白处选择新建==&gt;字符串项，添加<code>DOCKER_HOST</code>变量如下</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/7f64e1d5cffc876353c86cbd084bc232/20230318173450.png" alt="7f64e1d5cffc876353c86cbd084bc232/20230318173450.png"></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><code>docker version</code></p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/ae28f89adea161fb2b3d329b015334cb/20230318173511.png" alt="ae28f89adea161fb2b3d329b015334cb/20230318173511.png"></p>
<p>新建一个容器也ok</p>
<p><code>docker run -it --rm debian</code></p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/e50d5140ddb25146bd39aa1b5414a177/20230318173530.png" alt="e50d5140ddb25146bd39aa1b5414a177/20230318173530.png"></p>
<h2 id="完善"><a href="#完善" class="headerlink" title="完善"></a>完善</h2><p>windows app调用docker时，可能会使用windows path，这样就会导致docker命令执行失败，写个c++小程序就可以解决这个问题；将原来的docker.exe更名为dockerb.exe，再将这段代码编译为docker.exe放入<code>C:\bin</code> ，然后把wine的c盘链接到根目录<code>ln -s /home/user/.wine/driver_c /c</code>。这段代码不能解决路径中含空格的问题，使用时需注意。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">ReplaceAll</span><span class="params">(string str, <span class="type">const</span> string&amp; from, <span class="type">const</span> string&amp; to)</span> </span>&#123;</span><br><span class="line">    <span class="type">size_t</span> start_pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((start_pos = str.<span class="built_in">find</span>(from, start_pos)) != string::npos) &#123;</span><br><span class="line">        str.<span class="built_in">replace</span>(start_pos, from.<span class="built_in">length</span>(), to);</span><br><span class="line">        start_pos += to.<span class="built_in">length</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    string cmd=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; argc; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string s = argv[i];</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="string">&quot;docker&quot;</span> | s == <span class="string">&quot;docekr.exe&quot;</span>) &#123;</span><br><span class="line">            s = <span class="string">&quot;dockerb.exe&quot;</span>;</span><br><span class="line">            cmd = s;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s = <span class="built_in">ReplaceAll</span>(s, <span class="string">&quot;C:&quot;</span>, <span class="string">&quot;/c&quot;</span>);</span><br><span class="line">        s = <span class="built_in">ReplaceAll</span>(s, <span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">        cmd += ( <span class="string">&quot; &quot;</span> + s );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出最后执行的docker指令，便于调试，如果不需要可以删掉</span></span><br><span class="line">    ofstream ofs;</span><br><span class="line">    ofs.<span class="built_in">open</span>(<span class="string">&quot;docker-debug&quot;</span>, ios::out);</span><br><span class="line">    ofs &lt;&lt; cmd &lt;&lt; endl;</span><br><span class="line">    ofs.<span class="built_in">close</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">system</span>(cmd.<span class="built_in">c_str</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>docker</tag>
        <tag>wine</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL2下使用systemd的最佳方案</title>
    <url>/p/f3ac6e58.html</url>
    <content><![CDATA[<blockquote>
<p>本教程基于WSL2，参考：<a href="https://wsldl-pg.github.io/ArchW-docs/Known-issues/">ArchWSL Known issues</a></p>
</blockquote>
<p>在<a href="https://wsldl-pg.github.io/ArchW-docs/Known-issues/">ArchWSL Known issues</a>中，有几种推荐的systemd容器，分别是“<a href="https://github.com/sorah/subsystemctl">subsystemctl</a>”, “<a href="https://github.com/arkane-systems/genie">genie</a>”, “<a href="https://github.com/nullpo-head/wsl-distrod">wsl-distrod</a>” or “<a href="https://github.com/lungothrin/bottled-shell">bottled-shell</a>”，其中我比较推荐的就是“<a href="https://github.com/nullpo-head/wsl-distrod">wsl-distrod</a>”，本教程也是基于此展开。</p>
<span id="more"></span>

<p>wsl-distrod的安装方法参考他的项目主页，发行版可以选择自己喜欢的，我推荐Ubuntu，对WSL适配比较好</p>
<p>安装完进入系统后，就已经可以使用systemd了</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/fd7adc4080ae6bb66ac289b8e48c94b3/20230318173810.png" alt="fd7adc4080ae6bb66ac289b8e48c94b3/20230318173810.png"></p>
<p>但是systemctl status –user 不能正常工作，wslg也不能使用wayland</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/9f2012704b13c4704181ff4bb492589f/20230318173826.png" alt="9f2012704b13c4704181ff4bb492589f/20230318173826.png"></p>
<p>因为distrod安装的Ubuntu有一个问题，在你新建用户后，/mnt/wslg/runtime-dir的权限是属于用户ubuntu的，这个文件夹即XDG_RUNTIME_DIR其他用户无法访问，wayland程序的运行也需要访问runtime-dir，你可以直接把runtime-dir的权限改为777，虽然不符合<a href="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html#:~:text=%24XDG_RUNTIME_DIR">$XDG_DATA_HOME - XDG Base Directory Specification</a>的要求，但是这样其他用户就可以访问了，wayland也就可以正常工作。</p>
<p>这样做用户的dbus依然不能运行，因为他要求runtime-dir 的权限必须为700。</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/bdb4244187e9eb5a54412808e42e0a6d/20230318173858.png" alt="bdb4244187e9eb5a54412808e42e0a6d/20230318173858.png"></p>
<p>为了解决这个问题，最好的思路就是把XDG_RUNTIME_DIR设置为默认的/run/user/<em>uid</em>目录（wsl2中，该变量为/mnt/wslg/runtime-dir），然后正确设置权限；</p>
<p>首先，用<code>loginctl enable-linger $(id -u)</code>，系统会创建/run/user/<em>uid</em>目录，最后把wayland链接到该目录中（保证用户正常使用wayland）</p>
<p>编写一个完成这些任务的脚本 <code>sudo vi /bin/update-runtime-dir</code>，并给予可执行权限 <code>sudo chmod +x /bin/update-runtime-dir</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line">ln-runtime-<span class="function"><span class="title">dir</span></span>() &#123;</span><br><span class="line">        <span class="comment"># 获取系统所有的uid</span></span><br><span class="line">        UIDS=($(awk -F: <span class="string">&#x27;&#123;if ($3 &gt;= 0) &#123;printf &quot;%s\n&quot;, $3&#125;&#125;&#x27;</span> /etc/passwd))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> <span class="variable">$&#123;UIDS[@]&#125;</span></span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">                loginctl enable-linger <span class="variable">$id</span></span><br><span class="line">                <span class="built_in">ln</span> -s /mnt/wslg/runtime-dir/wayland* /run/user/<span class="variable">$id</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> :; <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">sleep</span> 1;</span><br><span class="line">        <span class="built_in">chmod</span> 777 -R /mnt/wslg/runtime-dir;</span><br><span class="line">        ln-runtime-dir;</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>编写一个systemd服务 <code>sudo vi /lib/systemd/system/update-runtime-dir-d.service</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Fix runtime-dir</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/update-runtime-dir</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>然后启用该systemd服务 <code>sudo systemctl enable --now update-runtime-dir-d</code> </p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/6fd94d2ae4605113f397f36e095ac3a3/20230318173934.png" alt="6fd94d2ae4605113f397f36e095ac3a3/20230318173934.png"></p>
<p>修改 <code>~/.bashrc</code>，如果是zsh则修改 <code>~/.zshrc</code> ， 在最后添加 <code>export XDG_RUNTIME_DIR=&quot;/run/user/$(id $USER -u)&quot;</code></p>
<p>执行 <code> wsl -t Distrod</code>终止该发行版，然后执行 <code>wsl -d Distrod</code>运行</p>
<p>这时就可以使用 <code>systemctl status --user</code>了</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/7b2088e7a720fba920288a847a23fb3f/20230318174002.png" alt="7b2088e7a720fba920288a847a23fb3f/20230318174002.png"></p>
]]></content>
      <categories>
        <category>wsl2</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>wsl2</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7安装docker</title>
    <url>/p/877f4866.html</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.runoob.com/docker/centos-docker-install.html">CentOS Docker 安装 | 菜鸟教程 (runoob.com)</a></p>
</blockquote>
<span id="more"></span>

<h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><p>较旧的 Docker 版本称为 docker 或 docker-engine 。如果已安装这些程序，请卸载它们以及相关的依赖项。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine  </span><br></pre></td></tr></table></figure>

<h3 id="安装-Docker-Engine-Community"><a href="#安装-Docker-Engine-Community" class="headerlink" title="安装 Docker Engine-Community"></a>安装 Docker Engine-Community</h3><h3 id="使用-Docker-仓库进行安装"><a href="#使用-Docker-仓库进行安装" class="headerlink" title="使用 Docker 仓库进行安装"></a>使用 Docker 仓库进行安装</h3><p>在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker。</p>
<p><strong>设置仓库</strong></p>
<p>安装所需的软件包。yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \ </span><br><span class="line">  lvm2  </span><br></pre></td></tr></table></figure>

<p>使用以下命令来设置稳定的仓库。</p>
<h2 id="使用官方源地址（比较慢）"><a href="#使用官方源地址（比较慢）" class="headerlink" title="使用官方源地址（比较慢）"></a>使用官方源地址（比较慢）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo  </span><br></pre></td></tr></table></figure>

<p>可以选择国内的一些源地址：</p>
<h2 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo  </span><br></pre></td></tr></table></figure>

<h2 id="清华大学源"><a href="#清华大学源" class="headerlink" title="清华大学源"></a>清华大学源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo  </span><br></pre></td></tr></table></figure>

<h3 id="安装-Docker-Engine-Community-1"><a href="#安装-Docker-Engine-Community-1" class="headerlink" title="安装 Docker Engine-Community"></a>安装 Docker Engine-Community</h3><p>安装最新版本的 Docker Engine-Community 和 containerd，或者转到下一步安装特定版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install -y docker-ce  docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<p>如果提示您接受 GPG 密钥，请选是。</p>
<blockquote>
<p><strong>有多个 Docker 仓库吗？</strong></p>
<p>如果启用了多个 Docker 仓库，则在未在 yum install 或 yum update 命令中指定版本的情况下，进行的安装或更新将始终安装最高版本，这可能不适合您的稳定性需求。</p>
</blockquote>
<p>Docker 安装完默认未启动。并且已经创建好 docker 用户组，但该用户组下没有用户。</p>
<p><strong>要安装特定版本的 Docker Engine-Community，请在存储库中列出可用版本，然后选择并安装：</strong></p>
<p>1、列出并排序您存储库中可用的版本。此示例按版本号（从高到低）对结果进行排序。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum list docker-ce --showduplicates | <span class="built_in">sort</span> -r</span><br><span class="line"></span><br><span class="line">docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable  </span><br><span class="line">docker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable  </span><br><span class="line">docker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable  </span><br><span class="line">docker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable</span><br></pre></td></tr></table></figure>

<p>2、通过其完整的软件包名称安装特定版本，该软件包名称是软件包名称（docker-ce）加上版本字符串（第二列），从第一个冒号（:）一直到第一个连字符，并用连字符（-）分隔。例如：docker-ce-18.09.1。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure>

<p>启动 Docker。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start docker</span><br></pre></td></tr></table></figure>

<p>通过运行 hello-world 映像来验证是否正确安装了 Docker Engine-Community 。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker run hello-world</span><br></pre></td></tr></table></figure>

<h3 id="卸载-docker"><a href="#卸载-docker" class="headerlink" title="卸载 docker"></a>卸载 docker</h3><p>删除安装包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove docker-ce</span><br></pre></td></tr></table></figure>

<p>删除镜像、容器、配置文件等内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf /var/lib/docker</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>debian安装mysql以及一些基本的配置</title>
    <url>/p/e0b16a19.html</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>前往mysql官网，下载mysql apt源配置程序<a href="https://dev.mysql.com/downloads/repo/apt/">MySQL :: Download MySQL APT Repository</a> ，使用<code>dkpg -i </code> 安装。然后使用<code>apt update</code> 更新源，最后使用<code>apt install mysql-server</code>安装即可。</p>
<span id="more"></span>

<h2 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h2><p>debian环境下，mysql的配置目录在<code>/etc/mysql/mysql.conf.d</code> 下，通过<code>vim /etc/mysql/mysql.conf.d/mysqld.cnf</code> 编辑mysqld守护进程的配置。</p>
<p>例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="comment"># 修改默认端口</span></span><br><span class="line">port            = 3310</span><br></pre></td></tr></table></figure>

<p><em>更多mysql系统变量请参考<a href="https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_datadir">MySQL :: MySQL 8.0 Reference Manual :: 5.1.8 Server System Variables</a></em></p>
<h2 id="修改root密码"><a href="#修改root密码" class="headerlink" title="修改root密码"></a>修改root密码</h2><p>mysql没有初始root密码，可以直接终端输入mysql进入数据库。</p>
<p>要设置root密码，可以在 <strong>终端</strong> 执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqladmin -uroot password <span class="string">&#x27;password&#x27;</span> </span><br></pre></td></tr></table></figure>

<p>如果要修改root密码，在 <strong>终端</strong> 执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqladmin -uroot -p<span class="string">&#x27;oldpassword&#x27;</span> password <span class="string">&#x27;newpassword&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="mysql用户增删改查"><a href="#mysql用户增删改查" class="headerlink" title="mysql用户增删改查"></a>mysql用户增删改查</h2><h3 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h3><p>新建一个名为test，密码为test的用户，<code>@&#39;localhost&#39;</code> 指该用户只能通过本地网络访问；</p>
<p>如果指定ip，则把<code>localhost </code> 改为*<code>ip</code>*，多个ip的话就多执行几次，ip分别修改为指定的某几个ip；</p>
<p>如果允许其通过任何ip访问，则把<code>localhost </code> 改为<code>% </code> ，%代表通配符，也可以设置<code>192.168.0.%</code> 允许来自192.168.0.1~192.168.0.255的ip进行访问</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;test&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop user test@localhost;</span><br><span class="line">drop user test@&#x27;%&#x27;;</span><br><span class="line">drop user test@&#x27;ip&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="更改密码"><a href="#更改密码" class="headerlink" title="更改密码"></a>更改密码</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">with</span> caching_sha2_password <span class="keyword">by</span> <span class="string">&#x27;newpassword&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="查看权限"><a href="#查看权限" class="headerlink" title="查看权限"></a>查看权限</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>

<h3 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h3><p>授予用户test通过外网IP对数据库“testdb”的全部权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="string">&#x27;testdb&#x27;</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"># 刷新权限</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>debootstrap制作纯净ubutnu-armhf系统</title>
    <url>/p/74ba0ebc.html</url>
    <content><![CDATA[<!--article-->

<p>debootstrap是debian/ubuntu下的一个工具，用来构建一套基本的系统(根文件系统)。生成的目录符合Linux文件系统标准(FHS)，即包含了/boot、/etc、/bin、/usr等等目录，它生成的系统比发行版本的Linux体积小很多，当然功能也没那么强大，因此，只能说是“基本的系统”。</p>
<p>前面我写了一篇华为悦盒安装debian9系统的文章，其中系统就是debootstrap生成的</p>
<span id="more"></span>

<h1 id="安装debootstrap"><a href="#安装debootstrap" class="headerlink" title="安装debootstrap"></a><strong>安装debootstrap</strong></h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install debootstrap arch-install-scripts</span><br></pre></td></tr></table></figure>

<h2 id="构建系统"><a href="#构建系统" class="headerlink" title="构建系统"></a>构建系统</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> debootstrap --<span class="built_in">arch</span> armhf focal /mnt/ubuntu https://mirrors.ustc.edu.cn/ubuntu-ports/</span><br></pre></td></tr></table></figure>

<p>其中 <code>--arch</code> 指定系统平台，本文是在armhf平台构建，其他平台步骤也大概是这些，<code>focal</code> 指ubuntu20.04LTS，<code>/mnt/ubuntu</code> 指定安装目录，最后一个是镜像，如果构建时报错<code>No such script: /usr/share/debootstrap/scripts..</code> ，则需要下载前往<code>https://packages.ubuntu.com/jammy/debootstrap</code> 下载最新的debootstrap，安装后再运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo debootstrap --arch armhf jammy /mnt/ubuntu https://mirrors.ustc.edu.cn/ubuntu-ports/</span><br></pre></td></tr></table></figure>

<p>构建完成后，使用 <code>arch-chroot /mnt/ubuntu</code> 进入系统进行配置</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>修改/etc/hosts，添加 <code>127.0.0.1    hostname</code> ，<strong>其中hostname替换为/etc/hostname里的内容</strong></p>
<p>编辑软件源添加 <strong>universe</strong> ，后面安装软件时需要，然后 <code>apt update</code> 更新软件列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu-ports jammy main universe</span><br></pre></td></tr></table></figure>

<p>安装基本软件，这些是确保ssh能用的基础软件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install iptables network-manager ifupdown ethtool openssh-server</span><br></pre></td></tr></table></figure>

<p><strong>配置网络</strong>，编辑 /etc/network/interfaces.d/eth0，添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auto eth0</span><br><span class="line">iface eth0 inet dhcp</span><br></pre></td></tr></table></figure>

<p><strong>配置ssh</strong>，编辑/etc/ssh/sshd_config，添加 <code>PermitRootLogin yes</code> </p>
<p>添加用户ubuntu，<code>useradd -m ubuntu</code>，修改其默认shell为bash <code>usermod --shell /bin/bash</code>，</p>
<p>然后passwd ubuntu，passwd分别给ubuntu和root用户设置密码</p>
<p><strong>清理</strong>，<code>apt clean</code>， <code>history -c</code> </p>
<p>完成这些步骤后一个最最基本的ubuntu系统就配置完成了，可以尝试启动了</p>
]]></content>
      <categories>
        <category>debian</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>debootstrap</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>docker运行nextcloud</title>
    <url>/p/f2db7b6e.html</url>
    <content><![CDATA[<p>一直感觉家里每个设备之间传递文件很不方便，有时候为了从手机传一张图片到电脑，不得不在电脑上登录qq或微信；我很不喜欢电脑挂着qq或微信，原因基本上就是：1、有消息一直闪的很烦；2、不经常使用，挂在后台占用电脑内存，给电脑增加了很多负担。因此我一直想着有没有什么更好的办法解决这个问题。</p>
<p>最终决定要解决这个问题是因为有一天我需要在手机上修改一张图片然后在电脑上用，手机改完用qq发到电脑，电脑使用后感觉效果不满意，然后又要手机修改然后再发到电脑。几次下来后觉得是时候解决一下这个问题了；想到家里还有一个闲置的平板，就有了把平板改为云盘的想法。</p>
<span id="more"></span>

<p>说做就做！</p>
<p>把平板改为云盘，给平板装上linux应该是最好的，我的平板是联想的miix28，这是一款老平板了，我试着装ubuntu，居然装不上，几个lts版本都栽在了安装grub这一步，archlinux也是如此。难道我的计划刚开始就要泡汤了吗？</p>
<p>还好！最后试了fedora成功安装了，并且十分完美。然后就是一些对新系统的简单配置，主要就是：换源、安装docker、关闭selinux。</p>
<h2 id="步入正题"><a href="#步入正题" class="headerlink" title="步入正题"></a>步入正题</h2><h3 id="安装nextcloud"><a href="#安装nextcloud" class="headerlink" title="安装nextcloud"></a>安装nextcloud</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull nextcloud</span><br></pre></td></tr></table></figure>

<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/b227e8e4ce824cac783ac875d68ea7da/20230318173117.png" alt="b227e8e4ce824cac783ac875d68ea7da/20230318173117.png"></p>
<h3 id="安装postgres"><a href="#安装postgres" class="headerlink" title="安装postgres"></a>安装postgres</h3><p>我选择了postgres作为nextcloud的数据库，nextcloud提供了三种数据库可供选择，你可以选择其他数据库</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/e54824557b729d1c5d2f7801e9feb332/20230318173137.png" alt="e54824557b729d1c5d2f7801e9feb332/20230318173137.png"></p>
<h4 id="新建postgres容器，新建数据库和用户"><a href="#新建postgres容器，新建数据库和用户" class="headerlink" title="新建postgres容器，新建数据库和用户"></a>新建postgres容器，新建数据库和用户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name postgres-nc  --restart=always -v /data/postgres-nc:/var/lib/postgresql/data -p 5433:5432 -e POSTGRES_PASSWORD=password postgres</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it postgres-nc /bin/bash</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su postgres</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">createuser -P -s -e nextcloud</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">psql</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database nextcloud owner<span class="operator">=</span>nextcloud;</span><br></pre></td></tr></table></figure>

<h3 id="新建nextcloud容器"><a href="#新建nextcloud容器" class="headerlink" title="新建nextcloud容器"></a>新建nextcloud容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name nextcloud --restart=always -p 8080:80 -v /data/nextcloud:/var/www/html/ nextcloud</span><br></pre></td></tr></table></figure>

<p>完成后就可以通过<code>ip:8080</code> 访问到了，这里配置一下，注意数据库ip要填写宿主机ip，查看容器内宿主机ip的指令如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect nextcloud --format &#123;&#123;.NetworkSettings.Gateway&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/126436963c7738ed2b703054fcfde920/20230318173225.png" alt="126436963c7738ed2b703054fcfde920/20230318173225.png"></p>
<p>接下来就是点击安装等待安装完成即可</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/1fbd3e23dbe5ea845f30e629e444ad08/20230318173249.png" alt="1fbd3e23dbe5ea845f30e629e444ad08/20230318173249.png"></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>nextcloud</tag>
      </tags>
  </entry>
  <entry>
    <title>nmcli创建wifi热点</title>
    <url>/p/cfacc943.html</url>
    <content><![CDATA[<!--article-->

<p>nmcli 命令是在 Linux 命令行操作 NetworkManager 的工具。它是 NetworkManager 软件包集成的一部分，通过使用一些 应用程序接口（API）来操作 NetworkManager 。nmcli 发布于 2010 年，用以替代其他配置网络接口和连接的方法。nmcli可以实现连接wifi，也可以实现创建wifi热点的功能。</p>
<span id="more"></span>

<h3 id="获取wifi设备"><a href="#获取wifi设备" class="headerlink" title="获取wifi设备"></a>获取wifi设备</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip <span class="built_in">link</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">2: bond0: &lt;BROADCAST,MULTICAST,MASTER&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 4a:1f:02:96:f1:67 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">3: dummy0: &lt;BROADCAST,NOARP&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 46:c1:25:c8:93:ca brd ff:ff:ff:ff:ff:ff</span><br><span class="line">4: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:11:22:33:44:55 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">5: wlan0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq state DOWN mode DORMANT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 84:21:f1:97:35:5f brd ff:ff:ff:ff:ff:ff</span><br><span class="line">6: p2p0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq state DOWN mode DORMANT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 86:21:f1:97:35:5f brd ff:ff:ff:ff:ff:ff</span><br><span class="line">7: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN mode DEFAULT group default</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:b9:d4:2b:72 brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure>

<p>其中wlan0是我的wifi设备</p>
<h3 id="创建热点"><a href="#创建热点" class="headerlink" title="创建热点"></a>创建热点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分别配置热点设备、名称、密码，然后创建新热点配置</span></span><br><span class="line">IFNAME=<span class="string">&quot;wlan0&quot;</span>; CON_NAME=<span class="string">&quot;linux-ap&quot;</span>; CON_PASSWORD=<span class="string">&quot;password&quot;</span></span><br><span class="line">nmcli con add <span class="built_in">type</span> wifi ifname <span class="variable">$IFNAME</span> con-name <span class="variable">$CON_NAME</span> autoconnect <span class="built_in">yes</span> ssid <span class="variable">$CON_NAME</span></span><br><span class="line"><span class="comment"># 将连接方法设置为共享</span></span><br><span class="line">nmcli con modify <span class="variable">$CON_NAME</span> 802-11-wireless.mode ap 802-11-wireless.band <span class="built_in">bg</span> ipv4.method shared</span><br><span class="line"><span class="comment"># 设置热点密码</span></span><br><span class="line">nmcli con modify <span class="variable">$CON_NAME</span> wifi-sec.key-mgmt wpa-psk</span><br><span class="line">nmcli con modify <span class="variable">$CON_NAME</span> wifi-sec.psk <span class="variable">$CON_PASSWORD</span></span><br><span class="line"><span class="comment"># 启动热点</span></span><br><span class="line">nmcli con up <span class="variable">$CON_NAME</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nmcli</tag>
        <tag>wifi</tag>
      </tags>
  </entry>
  <entry>
    <title>使用nginx反向代理，实现windows主机直接访问WSL2中docker容器的bridge网络</title>
    <url>/p/506c1f25.html</url>
    <content><![CDATA[<p>wsl2中的网络映射到了localhost，也就是说在win上可以使用localhost:port访问到wsl2上的端口。但是wsl2中docker却存在问题，不能通过主机直接访问使用bridge桥接网络的容器内网ip，必须用docker映射端口后访问，这并非bug，因为wls2实质为虚拟机，不过这多少有些不便。如果容器使用host网络就没有这些问题了，可以直接通过localhost:port访问容器内端口。</p>
<p>但是使用bridge网络并且没有映射端口的容器该怎么解决呢？下面就展示一种使用nginx反向代理实现主机直接访问WSL2中docker容器bridge网络的方法。</p>
<span id="more"></span>

<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p>首先在wsl2安装nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install nginx</span><br></pre></td></tr></table></figure>

<p>安装完成后，你就应该能通过<a href="http://127.0.0.1/">http://127.0.0.1/</a> 访问到nginx欢迎页了</p>
<p>如果你的wsl2已经启用了systemd，也可以通过<code>systemctl status nginx</code>查看nginx服务状态</p>
<p><em>启用systemd的方法可参考我的另一篇文章<a href="/2022/04/05/lorzzn-s-posts/hexo/2022/WSL2%E4%B8%8B%E4%BD%BF%E7%94%A8systemd%E7%9A%84%E6%9C%80%E4%BD%B3%E6%96%B9%E6%A1%88/">WSL2下使用systemd的最佳方案 </a></em></p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/1cede2af15560573416363ffc173c1e2/20230318172248.png" alt="1cede2af15560573416363ffc173c1e2/20230318172248.png"></p>
<p>nginx如果正常运行，就可以进行下一步，编写nginx配置<code>sudo vim /etc/nginx/sites-available/rp_server.conf</code>，我这里设置的监听端口是801，可以自定义</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 801;</span><br><span class="line">        location / &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$request_uri</span> ~ <span class="string">&quot;/(.*)&quot;</span>)&#123;</span><br><span class="line">                        proxy_pass <span class="variable">$1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启用配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /etc/nginx/sites-available/rp_server.conf /etc/nginx/sites-enabled/rp_server.conf</span><br></pre></td></tr></table></figure>

<p>重启nginx服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart nginx</span><br></pre></td></tr></table></figure>

<p>完成！</p>
<h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><p>我的portainer容器用docker映射了9000端口，可以通过<a href="http://127.0.0.1:9000/">http://127.0.0.1:9000/</a> 访问</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/fc9c25f241f804effb3ad9a899a42b2f/20230318172308.png" alt="fc9c25f241f804effb3ad9a899a42b2f/20230318172308.png"></p>
<p>上图可以看到，我的portainer容器内网ip为<strong>172.17.0.2</strong>，使用nginx反代，我通过<a href="http://127.0.0.1:801/http://172.17.0.2:9000/">http://127.0.0.1:801/http://172.17.0.2:9000/</a> 也可以访问到portainer</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/b6a455af23552b2b9ef56635d52dffb0/20230318172328.png" alt="b6a455af23552b2b9ef56635d52dffb0/20230318172328.png"></p>
<p>不映射端口启动一个python容器，启动一个http server</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/e0cfb32537c5c0d0cd3c53388c569b82/20230318172344.png" alt="e0cfb32537c5c0d0cd3c53388c569b82/20230318172344.png"></p>
<p>docker inspect查看到该容器ip为172.17.0.3，就可以通过nginx反代访问到该ip</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/5385c3d2a785c5254cb908cfa05cac7e/20230318172400.png" alt="5385c3d2a785c5254cb908cfa05cac7e/20230318172400.png"></p>
]]></content>
      <categories>
        <category>wsl2</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>docker</tag>
        <tag>wsl2</tag>
      </tags>
  </entry>
  <entry>
    <title>使用windows计划任务实现wsl2开机自启，并且保持运行</title>
    <url>/p/eb411f9c.html</url>
    <content><![CDATA[<p>wsl2启动速度比wsl1慢了很多，因此我过去一直都是使用wsl1，但是wsl1对docker的支持不太好，只有旧版能正常运行，参考<a href="https://www.jianshu.com/p/20ebdbf68744">WSL 中 Docker 使用总结 - 简书 (jianshu.com)</a> ，wsl2速度慢准确来说应该是启动速度慢，wsl中的发行版在一段时间不使用后就会停止，再进入wsl就会有一个启动过程，这里wsl2比wsl1要慢很多。</p>
<span id="more"></span>

<p>知道了导致wsl2速度慢的原因了，怎么解决呢？</p>
<p>首先，想到的是让wsl2开机运行，这样也能减少第一次启动花费的时间，实现开机运行程序的一个比较好的方法就是windows计划任务，直接启动wsl是不行的，会弹出来一个终端窗口，最小化也还是在任务栏里，这样和开机手动启动一个终端进去wsl2然后最小化不久没区别了？解决这个问题，powershell是个很好的答案，我推荐最新的powershell7，速度更快，功能更强大。powershell有一个参数，可以设置窗口模式，其中Hidden就是隐藏窗口执行，并且不会在任务栏显示，相当于后台执行。</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/f518e650c84148ca26b89619a68a5273/20230318172424.png" alt="f518e650c84148ca26b89619a68a5273/20230318172424.png"></p>
<p>有了这些，我们就可以编写计划任务 了</p>
<p>右键此电脑，点击管理，选择计划任务，然后点击创建任务</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/25150a7b67db7688ad8951b1d97af242/20230318172513.png" alt="25150a7b67db7688ad8951b1d97af242/20230318172513.png"></p>
<p><strong>常规</strong> 设置如下</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/7e65202f20d6034d29c6364c6e1ca2b5/20230318172525.png" alt="7e65202f20d6034d29c6364c6e1ca2b5/20230318172525.png"></p>
<p><strong>触发器</strong> 新建一个登录时的触发器</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/e62eb44c9af10bcb2a8712863c549c56/20230318172540.png" alt="e62eb44c9af10bcb2a8712863c549c56/20230318172540.png"></p>
<p><strong>操作</strong> 新建一个启动程序的操作，程序填<code>pwsh.exe</code>（没有安装powershell7的话填powershell.exe），参数填</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-WindowStyle</span> <span class="keyword">Hidden</span> <span class="literal">-Command</span> <span class="string">&quot;while(1)&#123;wsl -d Distrod-Ubuntu -e /opt/distrod/alias/bin/bash&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/dc9d870dea0c8806c3df40f2ea15670c/20230318172557.png" alt="dc9d870dea0c8806c3df40f2ea15670c/20230318172557.png"></p>
<p>其中Distrod-Ubuntu改为你想要开机自启并保持运行的wsl容器，如果你安装的不是带systemd的distrod，-e后面的内容则改为<code>/usr/bin/bash</code> </p>
<p><em>参考文章 <a href="/2022/04/05/lorzzn-s-posts/hexo/2022/WSL2%E4%B8%8B%E4%BD%BF%E7%94%A8systemd%E7%9A%84%E6%9C%80%E4%BD%B3%E6%96%B9%E6%A1%88/">WSL2下使用systemd的最佳方案 </a>了解 wsl-distrod</em></p>
<p>如果需要wsl2开机自动挂载vhd虚拟硬盘文件，首先要安装wsl preview - <a href="https://www.microsoft.com/en-us/p/windows-subsystem-for-linux-preview/9p9tqf7mrm4r">Get Windows Subsystem for Linux Preview - Microsoft Store</a> ，该功能只有wsl preview支持，然后将参数设置为</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-WindowStyle</span> <span class="keyword">Hidden</span> <span class="literal">-Command</span> <span class="string">&quot;wsl --shutdown; while(1)&#123;wsl --mount --vhd D:\WSL\DISKS\disk-128g-01.vhdx --bare; wsl -d Distrod-Ubuntu -e /opt/distrod/alias/bin/bash&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<p>其中vhd文件路径和wsl容器名称要改为你自己的</p>
<p><strong>条件</strong> 把这里的勾都去掉</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/388157095b050e061e6be709b49fc5d4/20230318172613.png" alt="388157095b050e061e6be709b49fc5d4/20230318172613.png"></p>
<p>其他的设置就可以保持默认，点击确定保存后，wsl2就可以实现开机自启并保持运行了</p>
]]></content>
      <categories>
        <category>wsl2</category>
      </categories>
      <tags>
        <tag>wsl2</tag>
      </tags>
  </entry>
  <entry>
    <title>修改 WSL2 容器的位置</title>
    <url>/p/ce4a8fcc.html</url>
    <content><![CDATA[<p>默认情况WSL2 容器可能在C盘上，时间久了文件可以越来越大，占用很多C盘分区，于是最好把它挪到其他空间更大，更好管理的硬盘或分区上，下面介绍一种移动wsl2容器位置的方法</p>
<span id="more"></span>

<p>在powershell中使用<code>wsl -l -v</code>查看所有容器，确定你想移动的wsl2</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/6cb0c41119c59efdf64ba8bed65884c4/20230318172635.png" alt="6cb0c41119c59efdf64ba8bed65884c4/20230318172635.png"></p>
<p>使用wsl –shutdown关闭wsl所有容器，或wsl -t <em>name</em> 终止你要移动的容器</p>
<p>打开windows注册表，打开路径</p>
<p><code>计算机\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Lxss</code></p>
<p>其中的每一个项就是你的一个容器，可以通过项的 <strong>DistributionName</strong> 确定你要移动的容器，其中 <strong>BasePath</strong> 就是容器文件保存的路径，你可以通过该路径找到容器文件，把他移动到其他地方，然后把 <strong>BasePath</strong> 修改为你移动后存放容器文件的文件夹即可，比如<code>D:\WSL\Distrod-Ubuntu</code>，然后就完成了。</p>
<p>你也可以修改该项中的其他值来修改wsl2容器的信息，比如 <strong>DefaultUid</strong> - 默认用户id， <strong>DistributionName</strong> - 容器名称</p>
]]></content>
      <categories>
        <category>wsl2</category>
      </categories>
      <tags>
        <tag>wsl2</tag>
      </tags>
  </entry>
  <entry>
    <title>华为悦盒EC6108V9C(hi3798mv100_hi3798mdmo1g)刷入debian9</title>
    <url>/p/848060e4.html</url>
    <content><![CDATA[<p>首先非常非常感谢海思机顶盒NAS社区teasiu大佬的盒子ubuntu nas（海纳思）系统，我的系统完全基于其开发。强烈推荐新手和小白刷teasiu大佬的系统，我的仅供参考和学习。</p>
<span id="more"></span>

<p>刷入方法和海纳思系统U 盘卡刷一样，参考 <a href="https://ecoo.top/usbflash/usbflash.html">U 盘卡刷教程 (ecoo.top)</a> ，注意我的盒子专有 REG 名称是 <code>mv100-mdmo1g</code> 我手上没有其他盒子，和我不一样的把我的压缩包里面的 <code>www_ecoo_top.ext4</code> 替换过去应该就可以（请自行测试！）</p>
<h1 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h1><p>2022.10.14</p>
<p>修改U盘自动挂载方法，之前会导致ntfs挂载失败</p>
<p>添加wifi驱动方法</p>
<p>2022.10.15</p>
<p>我测试了debootstrap构建生成Ubuntu20.04和22.04，都可以正常启动</p>
<p>2022.10.16</p>
<p>经过测试，目前Ubuntu20.04是最稳定的，更新百度云链接，更新u盘自动挂载脚本</p>
<h1 id="系统下载"><a href="#系统下载" class="headerlink" title="系统下载"></a>系统下载</h1><p>链接: <a href="https://pan.baidu.com/s/14eRBIKrDBd5jaBhRlHpOIg">https://pan.baidu.com/s/14eRBIKrDBd5jaBhRlHpOIg</a> 提取码: j7cr </p>
<h1 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h1><p>我的系统采用debootstrap生成，只配置了用户、网络、locales、ssh、vim，系统十分纯净，不建议小白使用，安装完成后，使用 <code>ssh debian@盒子ip</code> 连接，密码为 <code>password</code> ，默认root不能登录，需要开启的话添加 <code>PermitRootLogin yes</code> 到/etc/ssh/sshd_config，然后执行 <code>sudo systemctl restart sshd</code> </p>
<h1 id="安装完成后配置"><a href="#安装完成后配置" class="headerlink" title="安装完成后配置"></a>安装完成后配置</h1><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>系统十分精简，安装完成后占用不到300m，默认使用的shell是sh</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/2fe44cb9afc13721b1602aa6807b4009/20230318172140.png" alt="2fe44cb9afc13721b1602aa6807b4009/20230318172140.png"></p>
<p><strong>修改hosts ( /etc/hosts )，添加一行 <code>127.0.0.1    hi3798mv100</code></strong></p>
<p><code> sudo usermod --shell /bin/bash debian</code> 修改debian用户的默认shell为bash</p>
<p>修改时区 <code>ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></p>
<p><strong>安装完成后root分区会很小（只有420m），执行命令 <code>sudo resize2fs /dev/mmcblk0p9</code> 扩展到正常大小</strong></p>
<h2 id="U盘自动挂载"><a href="#U盘自动挂载" class="headerlink" title="U盘自动挂载"></a>U盘自动挂载</h2><p>如果想要开启u盘自动挂载，首先 <code> sudo systemctl edit systemd-udevd</code> 添加 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">MountFlags=shared</span><br><span class="line">PrivateMounts=no</span><br></pre></td></tr></table></figure>

<p>然后 <code>sudo systemctl restart systemd-udevd</code></p>
<p><strong>添加文件</strong></p>
<p>/usr/local/bin/usb-mount.sh，<code>chmod +x /usr/local/bin/usb-mount.sh</code> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This script is called from our systemd unit file to mount or unmount</span></span><br><span class="line"><span class="comment"># a USB drive.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">usage</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Usage: <span class="variable">$0</span> &#123;add|remove&#125; device_name (e.g. sdb1)&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$#</span> -ne 2 ]]; <span class="keyword">then</span></span><br><span class="line">    usage</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">ACTION=<span class="variable">$1</span></span><br><span class="line">DEVBASE=<span class="variable">$2</span></span><br><span class="line">DEVICE=<span class="string">&quot;/dev/<span class="variable">$&#123;DEVBASE&#125;</span>&quot;</span></span><br><span class="line">MOUNT_ROOTDIR=<span class="string">&quot;/mnt/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># See if this drive is already mounted, and if so where</span></span><br><span class="line">MOUNT_POINT=$(/bin/mount | /bin/grep <span class="variable">$&#123;DEVICE&#125;</span> | /usr/bin/awk <span class="string">&#x27;&#123; print $3 &#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">do_mount</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> [[ -n <span class="variable">$&#123;MOUNT_POINT&#125;</span> ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Warning: <span class="variable">$&#123;DEVICE&#125;</span> is already mounted at <span class="variable">$&#123;MOUNT_POINT&#125;</span>&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get info for this drive: $ID_FS_LABEL, $ID_FS_UUID, and $ID_FS_TYPE</span></span><br><span class="line">    <span class="built_in">eval</span> $(/sbin/blkid -o udev <span class="variable">$&#123;DEVICE&#125;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Figure out a mount point to use</span></span><br><span class="line">    MOUNT_POINT=<span class="string">&quot;<span class="variable">$&#123;MOUNT_ROOTDIR&#125;</span>/<span class="variable">$&#123;DEVBASE&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Mount point: <span class="variable">$&#123;MOUNT_POINT&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    /bin/mkdir -p <span class="variable">$&#123;MOUNT_POINT&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Global mount options</span></span><br><span class="line">    OPTS=<span class="string">&quot;rw,relatime&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># File system type specific mount options</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$&#123;ID_FS_TYPE&#125;</span> == <span class="string">&quot;vfat&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">        OPTS+=<span class="string">&quot;,users,gid=100,umask=000,shortname=mixed,utf8=1,flush&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$&#123;ID_FS_TYPE&#125;</span> == <span class="string">&quot;ntfs&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">        OPTS+=<span class="string">&quot;,permissions&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ! /bin/mount -o <span class="variable">$&#123;OPTS&#125;</span> <span class="variable">$&#123;DEVICE&#125;</span> <span class="variable">$&#123;MOUNT_POINT&#125;</span>; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Error mounting <span class="variable">$&#123;DEVICE&#125;</span> (status = $?)&quot;</span></span><br><span class="line">        /bin/rmdir <span class="variable">$&#123;MOUNT_POINT&#125;</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;**** Mounted <span class="variable">$&#123;DEVICE&#125;</span> at <span class="variable">$&#123;MOUNT_POINT&#125;</span> ****&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">do_unmount</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> [[ -z <span class="variable">$&#123;MOUNT_POINT&#125;</span> ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Warning: <span class="variable">$&#123;DEVICE&#125;</span> is not mounted&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        /bin/umount -l <span class="variable">$&#123;DEVICE&#125;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;**** Unmounted <span class="variable">$&#123;DEVICE&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Delete all empty dirs in $&#123;MOUNT_ROOTDIR&#125;/ that aren&#x27;t being used as mount</span></span><br><span class="line">    <span class="comment"># points. This is kind of overkill, but if the drive was unmounted</span></span><br><span class="line">    <span class="comment"># prior to removal we no longer know its mount point, and we don&#x27;t</span></span><br><span class="line">    <span class="comment"># want to leave it orphaned...</span></span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> <span class="variable">$&#123;MOUNT_ROOTDIR&#125;</span>/* ; <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [[ -n $(/usr/bin/find <span class="string">&quot;<span class="variable">$f</span>&quot;</span> -maxdepth 0 -<span class="built_in">type</span> d -empty) ]]; <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">if</span> ! /bin/grep -q <span class="string">&quot; <span class="variable">$f</span> &quot;</span> /etc/mtab; <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;**** Removing mount point <span class="variable">$f</span>&quot;</span></span><br><span class="line">                /bin/rmdir <span class="string">&quot;<span class="variable">$f</span>&quot;</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$&#123;ACTION&#125;</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">    add)</span><br><span class="line">        do_mount</span><br><span class="line">        ;;</span><br><span class="line">    remove)</span><br><span class="line">        do_unmount</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        usage</span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

<p>/etc/systemd/system/usb-mount@.service</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Mount USB Drive on %i</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">RemainAfterExit=<span class="literal">true</span></span><br><span class="line">ExecStart=/usr/local/bin/usb-mount.sh add %i</span><br><span class="line">ExecStop=/usr/local/bin/usb-mount.sh remove %i</span><br></pre></td></tr></table></figure>

<p>/etc/udev/rules.d/10-usbstorage.rules</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">KERNEL==<span class="string">&quot;sd[a-z][0-9]&quot;</span>, SUBSYSTEMS==<span class="string">&quot;usb&quot;</span>, ACTION==<span class="string">&quot;add&quot;</span>, RUN+=<span class="string">&quot;/bin/systemctl start usb-mount@%k.service&quot;</span></span><br><span class="line"></span><br><span class="line">KERNEL==<span class="string">&quot;sd[a-z][0-9]&quot;</span>, SUBSYSTEMS==<span class="string">&quot;usb&quot;</span>, ACTION==<span class="string">&quot;remove&quot;</span>, RUN+=<span class="string">&quot;/bin/systemctl stop usb-mount@%k.service&quot;</span></span><br><span class="line"></span><br><span class="line">KERNEL==<span class="string">&quot;mmcblk1[a-z][0-9]&quot;</span>, SUBSYSTEMS==<span class="string">&quot;block&quot;</span>, ACTION==<span class="string">&quot;add&quot;</span>, RUN+=<span class="string">&quot;/bin/systemctl start usb-mount@%k.service&quot;</span></span><br><span class="line"></span><br><span class="line">KERNEL==<span class="string">&quot;mmcblk1[a-z][0-9]&quot;</span>, SUBSYSTEMS==<span class="string">&quot;block&quot;</span>, ACTION==<span class="string">&quot;remove&quot;</span>, RUN+=<span class="string">&quot;/bin/systemctl stop usb-mount@%k.service&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后 执行 <code>sudo systemctl daemon-reload</code> </p>
<h2 id="recoverbackup"><a href="#recoverbackup" class="headerlink" title="recoverbackup"></a>recoverbackup</h2><p><strong>recoverbackup指令要从海纳思系统复制，同时也要复制bootargs7.bin</strong></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>目前本系统还没有测试其稳定性和功能，请谨慎使用，并且做好之前系统的备份以便排查和修复错误。</p>
<p>如果想要使用新的debian系统，可以网上自行搜索debian升级教程</p>
<p><strong>wifi</strong>可以参考论坛教程 <a href="https://bbs.histb.com/d/18-wifi">WIFI驱动安装教程(自动/手动) - 海思机顶盒NAS社区 (histb.com)</a> </p>
<p>添加文件 /etc/NetworkManager/conf.d/disable-random-mac.conf 然后重启 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[device]</span><br><span class="line">wifi.scan-rand-mac-address=no</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>极客</category>
      </categories>
      <tags>
        <tag>华为悦盒EC6108V9C</tag>
        <tag>hi3798mv100_hi3798mdmo1g</tag>
        <tag>极客</tag>
      </tags>
  </entry>
  <entry>
    <title>更改Windows上cmd的默认编码为UTF-8</title>
    <url>/p/1cfca78e.html</url>
    <content><![CDATA[<p>在Windows上，大部分应用的编码格式都已经统一为utf-8，utf-8也已经是我们常用的字符编码，但是我使用cmd时，却发现cmd的编码格式还是gbk，导致cmd运行程序时经常会出现乱码，怎么修改cmd默认编码格式呢？</p>
<span id="more"></span>

<p>搜了一下解决方案，大致有以下几种：</p>
<ol>
<li><p>cmd启动时自动运行指令<code>chcp 65001</code></p>
<p>打开注册表并前往地址：HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Command Processor，然后“右键-新建”，选择“字符串值”，“名称”列填写“autorun”, 数值数据填写“chcp 65001”。</p>
</li>
<li><p>启用系统utf-8支持</p>
<p>这是我采用的方法，这个方法是官方提供的方法，感觉会更为安全。步骤如下：</p>
<p>打开设置 ==&gt; 时间与语言 ==&gt; 语言与区域 ==&gt; 管理语言设置 ==&gt; 更改系统区域设置</p>
<p>这时能看到下方有一个 <code>Beta版：使用Unicode UTF-8...</code> 的选框，勾选上然后确定，重启就可以了。</p>
</li>
</ol>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/c07af0e7bb9a362d60f8470bc665c20b/20230321171237.png" alt="c07af0e7bb9a362d60f8470bc665c20b/20230321171237.png"></p>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Windows下python2报错&quot;LookupError:unknown encoding:cp65001&quot;</title>
    <url>/p/89d31abd.html</url>
    <content><![CDATA[<p>我是使用scoop安装的python2，版本如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python2 -V</span><br><span class="line">Python 2.7.18</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>在执行命令<code>python2 -m ensurepip</code> 时，报了一大串错误，抛出的异常如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  File &quot;c:\users\eavel\appdata\local\temp\tmpg4lsci\pip-19.2.3-py2.py3-none-any.whl\pip\_internal\utils\ui.py&quot;, line 53, in _select_progress_class</span><br><span class="line">LookupError: unknown encoding: cp65001  </span><br></pre></td></tr></table></figure>

<p>网上查了一下解决方案，基本上就是两种：</p>
<ul>
<li><p>设置环境变量<code>PYTHONIOENCODING=UTF-8</code></p>
<p>Windows下设置变量<code> $env:PYTHONIOENCODING=&quot;UTF-8&quot;</code> ，这个方案对我的情况可行，但是安装包时进度条会乱码，而且这样每次使用python2之前都要确保设置了这个环境变量，略显麻烦。</p>
</li>
<li><p>安装包<code>pip install win-unicode-console</code> </p>
<p>该方案对我无效…</p>
</li>
</ul>
<p>有没有什么更好的解决方案呢？答案是有的。</p>
<p>这个问题本质上python2无法识别字符编码<code>cp65001</code>，而这个编码正是我们常用的<code>utf-8</code>，python2是可以识别<code>utf-8</code>的，那为什么还报错呢？因为python2的编码字典里没有<code>cp65001</code>的键值，这个文件位于<code>$PYTHONHOME/Lib/encodings/aliases.py</code> ，我们可以手动添加</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="comment"># utf_8 codec</span></span><br><span class="line">    <span class="string">&#x27;u8&#x27;</span>                 : <span class="string">&#x27;utf_8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;utf&#x27;</span>                : <span class="string">&#x27;utf_8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;utf8&#x27;</span>               : <span class="string">&#x27;utf_8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;utf8_ucs2&#x27;</span>          : <span class="string">&#x27;utf_8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;utf8_ucs4&#x27;</span>          : <span class="string">&#x27;utf_8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cp65001&#x27;</span>            : <span class="string">&#x27;utf_8&#x27;</span>, <span class="comment"># 添加cp65001</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>这样问题就解决了</p>
]]></content>
      <categories>
        <category>python2</category>
      </categories>
      <tags>
        <tag>python2</tag>
      </tags>
  </entry>
  <entry>
    <title>解决idea不能使用Gnome全局菜单插件Fildem的BUG</title>
    <url>/p/bdb488db.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在开始之前，我必须先发发牢骚，这真是个神奇的bug，fildem在其他软件下都很好用，唯独idea家族软件（比如clion，intellij）下就有这个bug，用着也是比较难受，刚开始我是配合idea下的一个插件<a href="https://plugins.jetbrains.com/plugin/7297-main-menu-toggler">Main Menu toggler</a> 打开原始顶部菜单来使用的，但是这就出现了双层菜单（话说上面的不能用就别显示啊，这样看着更加难受😭）</p>
<span id="more"></span>

<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/d86484ffec0994b4211ad701f12f7217/20230321170646.png" alt="d86484ffec0994b4211ad701f12f7217/20230321170646.png"></p>
<p><em><strong>（双层菜单）</strong></em></p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/702eb9ddd899a9324a8d6ff03d427475/20230321170710.png" alt="702eb9ddd899a9324a8d6ff03d427475/20230321170710.png"></p>
<p>双层菜单用着实在不爽，于是我搜了一圈解决方案，都不太好用（只能自己研究解决方案了）</p>
<h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>去<a href="https://github.com/gonzaarcr/Fildem">Github - Fildem</a> fork了一份代码，作者已经在上一个release版本后提交了很多代码，我有点小激动，这个bug是不是已经被修复了呢？我赶紧把源代码的版本安装上试了试，结果很失望，bug依然存在，而且更失望的是，源代码使用treelib库存放菜单元素，导致基于gtk的软件没有全局菜单了（由于重复键值的存在），本来是正常使用的。我把代码回退到作者添加treelib库之前</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard 853a367cdc0337b2ddcc5d5a39028b64079571e6 </span><br></pre></td></tr></table></figure>

<p>就正常了，然后解决idea的问题，修改一下代码解决<a href="https://github.com/gonzaarcr/Fildem/issues/108#">issues#108 Crash after click on PHPStorm navbar</a> , idea系列都会有这个问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># fildem/handlers/global_menu.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_menu</span>(<span class="params">self, menus</span>):</span><br><span class="line">    <span class="variable language_">self</span>.destroy_menus()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(menus) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">++  <span class="keyword">if</span> <span class="built_in">len</span>(menus[<span class="number">0</span>].path) == <span class="number">0</span>:</span><br><span class="line">++      <span class="keyword">return</span></span><br><span class="line">    current_prefix = menus[<span class="number">0</span>].path[<span class="number">0</span>]</span><br><span class="line">    current_menu = []</span><br></pre></td></tr></table></figure>

<p>加上上面的补丁后，我运行了一下fildem源代码程序，然后打开clion，等待加载完成后菜单居然正常了，我一阵狂喜，这个曾让我头大的问题居然就这么解决了？我把原先的fildem卸载然后安装我修改后的，然后重启电脑，再打开clion，发现全局菜单又失灵了。我真的纳闷了，明明之前运行没问题呀，我又打开源代码再次运行了一边，打开clion，菜单又好了！</p>
<h3 id="最终解决方案"><a href="#最终解决方案" class="headerlink" title="最终解决方案"></a>最终解决方案</h3><p>我反复折腾了好几遍，结果都和上面一样，最终我发现只要同时运行两个fildem进程（他们是可以共存的），idea系软件的全局菜单就可以正常工作（要按照上面的修改代码），是不是很奇怪！我暂时也不能深入研究原因，反正能用就行😂</p>
<h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p>可以直接clone我修改好的GitHub - <a href="https://github.com/lorzzn/Fildem">Fildem</a>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载原有版本</span></span><br><span class="line"><span class="built_in">sudo</span> pip uninstall fildem         </span><br><span class="line"><span class="comment"># 进入clone后的代码根目录，安装我修改的版本</span></span><br><span class="line"><span class="built_in">sudo</span> python3 setup.py install --optimize=1   </span><br><span class="line"><span class="comment"># 复制一个fildem开机自启动项目，开机启动两个fildem进程</span></span><br><span class="line"><span class="built_in">cp</span> ~/.config/autostart/fildem.desktop ~/.config/autostart/fildem2.desktop </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><p><a href="https://www.linuxuprising.com/2021/02/how-to-install-fildem-global-menu-and.html#">https://www.linuxuprising.com/2021/02/how-to-install-fildem-global-menu-and.html#</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>迅优103s棒子折腾笔记</title>
    <url>/p/e1a1fb6.html</url>
    <content><![CDATA[<p>前几天逛酷安，发现了随身wifi这个板块，看了几位酷友大神们的帖子，开启了我新世界的大门，原来随身wifi还可以有这么多玩法，并且只要十几块钱，我心动了，于是我根据酷友的建议，从淘特下单了迅优的棒子。</p>
<span id="more"></span>

<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/f5b3c269de1e2db1297c52504d9194f7/20230318172709.png" alt="f5b3c269de1e2db1297c52504d9194f7/20230318172709.png"></p>
<p>然后就是等快递了，多希望抽到一个8g的棒子，但是事与愿违，拿回家拆看一开，是个4g+新板号（QWQ）</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/79d2397b39c68741fa222a5869d5e4f8/20230318172751.png" alt="79d2397b39c68741fa222a5869d5e4f8/20230318172751.png"></p>
<p>酷安上关于这个板号的教程很少，没办法只能自己折腾了。</p>
<p>首先就是备份，按住上面的短接按钮插入电脑进入9008模式，然后用miko备份，这些步骤很多大佬都有写教程，我这里偷个懒，放上<strong>酱紫表</strong>大佬的一篇文章 <a href="https://qust.me/post/msm8916/">4g 随身 Wi-Fi 刷 openwrt 变成软路由 | 酱紫表 (qust.me)</a> （感谢大佬！）。</p>
<p>逛酷安看看有没有这个板号的最新教程，有酷友说可以和003的通刷，于是我找到<strong>苏苏和小亮</strong>大佬编译的openwrt <a href="https://www.kancloud.cn/a813630449/ufi_car/2792820">OpenWrt · 随身WIFI做主控的4G远程遥控车教程 · 看云 (kancloud.cn)</a> ，下载了UFI003的openwrt包，棒子进入fastboot，然后就是开刷</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/c5334e95623b5d416f3430f56c8f4df6/20230318172817.png" alt="c5334e95623b5d416f3430f56c8f4df6/20230318172817.png"></p>
<p>一切很顺利，刷完后棒子开机，浏览器打开 <a href="http://192.168.1.1/">http://192.168.1.1</a> 然后登陆，本以为一切正常，但是我的联通卡却不能用，搜了一些教程，比如说刷全网通基带、刷回原基带都没有用，还是不能工作</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/3772cbf2d29d4b2da9ae80832f52179e/20230318172828.png" alt="3772cbf2d29d4b2da9ae80832f52179e/20230318172828.png"></p>
<p>mmcli显示为禁用状态，启用的话会报错。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@HandsomeMod:~# mmcli -m 0 -e</span><br><span class="line">error: couldn<span class="string">&#x27;t enable the modem: &#x27;</span>GDBus.Error:org.freedesktop.libqmi.Error.Protocol.DeviceNotReady: Couldn<span class="string">&#x27;t set operating mode: QMI protocol error (52): &#x27;</span>DeviceNotReady<span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/6f2ba47dd2120eead26ef66604af1273/20230318172855.png" alt="6f2ba47dd2120eead26ef66604af1273/20230318172855.png"></p>
<p>后来逛Github有一条issue <a href="https://github.com/OpenStick/OpenStick/issues/20">4G completely non-functional on OpenStick · Issue #20 · OpenStick/OpenStick (github.com)</a> 也和我的情况一样，看了下面的评论，发现了解决办法，之前备份文件中有一个名为modem文件，用7z打开，image目录下有下图这些文件，把image文件夹解压出来，然后可以用adb传到棒子里</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/57350e0b328c1785568cbf9ffdb85c8a/20230318172915.png" alt="57350e0b328c1785568cbf9ffdb85c8a/20230318172915.png"></p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/aced75801c390c9a68b7fa1167775b69/20230318172929.png" alt="aced75801c390c9a68b7fa1167775b69/20230318172929.png"></p>
<p>然后在棒子的终端里把image下面的所有文件复制到 <code>/lib/firmware/</code> ，reboot重启棒子</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/3c587738f98395b0d92385c93461bdfe/20230318172945.png" alt="3c587738f98395b0d92385c93461bdfe/20230318172945.png"></p>
<p>重启完成后再进入后台，就可以看到sim卡可以正常使用了</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/854464ec8f08822448ad9c678c816c96/20230318173037.png" alt="854464ec8f08822448ad9c678c816c96/20230318173037.png"></p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/1b1c930d5d923f19c56ca7b7160b96b1/20230318173055.png" alt="1b1c930d5d923f19c56ca7b7160b96b1/20230318173055.png"></p>
]]></content>
      <categories>
        <category>极客</category>
      </categories>
      <tags>
        <tag>极客</tag>
        <tag>随身wifi</tag>
        <tag>迅优103s</tag>
      </tags>
  </entry>
  <entry>
    <title>关于我</title>
    <url>/p/9ff79b23.html</url>
    <content><![CDATA[<p>🙋‍♂️</p>
<p>lorzzn 的博客</p>
<span id="more"></span>

<p>联系方式: 255499213(at)qq(dot)com</p>
<p>还可以在这些地方找到我</p>
<ul>
<li><a href="https://lorzzn.github.io/vue3-personal-resume">我的简历</a></li>
</ul>
<table>
<thead>
<tr>
<th><center>网站开源地址</center></th>
</tr>
</thead>
<tbody><tr>
<td><span style="color:green">✔</span> <a href="https://github.com/lorzzn/lorzzn.github.io">lorzzn/lorzzn.github.io: my blog</a></td>
</tr>
<tr>
<td><span style="color:green">✔</span> <a href="https://gitee.com/lorzzn/lorzzn">lorzzn: blog (gitee.com)</a></td>
</tr>
</tbody></table>
<p>🍺🍺🍺🍺🍺🍺🍺🍺🍺🍺</p>
<!-- flag of hidden posts -->]]></content>
  </entry>
  <entry>
    <title>查看小侦探排行榜中的成绩</title>
    <url>/p/fab8b7dc.html</url>
    <content><![CDATA[<p>理工小侦探查询成绩的api只需要知道某个同学在小侦探平台的openid就可以查到他的成绩，而小侦探学霸排行的api又把同学们的openid暴露了出来，因此我们就有办法看到学霸排行里那些同学们都是考多少分了，有了这个发现，我简单写了一个程序。</p>
<span id="more"></span>

<p>直接上使用教程：<br>1、下载源代码：</p>
<ul>
<li>GitHub：<a href="https://github.com/lorzzn/xzt-rank">lorzzn/xzt-rank (github.com)</a></li>
</ul>
<p>2、通过微信打开小侦探成绩查询页面，点右上角的三个点，找到复制链接，找个地方粘贴一下，找到后面有openid=xxxxxx，其中xxxxxx就是你的openid</p>
<p>3、打开源代码中js/index.js文件，把openid填到”my_openid”后双引号里面</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/4b34e0f2bef917b124617aabca63b783/20230318165403.png" alt="4b34e0f2bef917b124617aabca63b783/20230318165403.png"></p>
<p>4、使用浏览器打开源代码中的index.html，推荐使用chrome</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/b446d7700b8591e94777d537eea1b2ed/20230318165427.png" alt="b446d7700b8591e94777d537eea1b2ed/20230318165427.png"></p>
<p>不保证长期有效哦</p>
<!-- flag of hidden posts -->]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux使用ss+v2ray+iptables实现透明代理和热点共享</title>
    <url>/p/11229f05.html</url>
    <content><![CDATA[<!--article-->

<p>代理搭建完成后，一般来说，如果想使用代理上网，客户端要安装代理程序，自己用也不算麻烦，但是如果客户端设备比较多、或者客户端没有支持代理的程序、又或者偶尔想分享代理给家里其他人使用，安装和配置代理程序就比较麻烦；解决这些问题，在家里配置一个软路由实现透明代理是比较好的答案。</p>
<span id="more"></span>

<h1 id="准备软路由设备"><a href="#准备软路由设备" class="headerlink" title="准备软路由设备"></a>准备软路由设备</h1><p><strong>什么是软路由？</strong>软路由是指利用台式机或服务器配合软件形成路由解决方案，主要靠软件的设置，达成路由器的功能；而硬路由则是以特有的硬设备，包括处理器、电源供应、嵌入式软件，提供设定的路由器功能。</p>
<p>现在好一些的路由器很多本身就是软路由，或者可以通过刷机刷成软路由，你可以检查一下自己家的路由设备支不支持软路由，如果支持的话就很简单了。如果不支持，找找家里的空闲设备，比如电视盒子、旧手机等等，现在宽带运营商一般都有送电视盒子，如果有用不到的盒子可以网上搜一下可不可以刷Linux，如果可以的话把它刷成Linux系统就可以用了（注意设备要支持开热点）</p>
<p><strong>为什么需要v2ray？</strong> ss路由规则不太好实现，相比之下v2ray就简单很多了并且功能很强大，使用v2ray主要也是为了实现路由功能</p>
<h1 id="配置软路由系统"><a href="#配置软路由系统" class="headerlink" title="配置软路由系统"></a>配置软路由系统</h1><p>准备好软路由并且有自己的代理服务器，ssh连接软路由</p>
<p>安装 <code>shadowsocks-libev</code> 和 <code>v2ray</code> ，我的是Ubuntu20.04系统，命令如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install shadowsocks-libev </span><br></pre></td></tr></table></figure>

<p><code>v2ray</code> 使用 <a href="https://github.com/v2fly/fhs-install-v2ray">fhs-install-v2ray</a> 安装</p>
<p>如果使用 <code>simple-obfs</code>，还需要执行 <code>apt install simple-obfs</code> 安装</p>
<h2 id="配置ss"><a href="#配置ss" class="headerlink" title="配置ss"></a>配置ss</h2><p><code>shadowsocks-libev</code> 安装完成后默认会启动服务端，执行 <code>systemctl disable --now shadowsocks-libev.service</code> 禁用并停止服务</p>
<p>添加ss客户端配置文件 <code>/etc/shadowsocks-libev/config-local.json</code>，其中的配置要改为你自己的</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;server&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ss-ip&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;server_port&quot;</span> <span class="punctuation">:</span> port<span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;method&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;chacha20-ietf-poly1305&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;password&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;password&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;plugin&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;obfs-local&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;plugin_opts&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;obfs=http;obfs-host=www.baidu.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;local_port&quot;</span> <span class="punctuation">:</span> <span class="number">1080</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;local_address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timeout&quot;</span> <span class="punctuation">:</span> <span class="number">60</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>然后执行 <code>systemctl enable --now shadowsocks-libev-local@config-local.service</code> 启用并运行ss客户端服务。完成后可以检测一下是否可用</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/a41f01094e1f0125e71366d7666003e9/20230318173554.png" alt="a41f01094e1f0125e71366d7666003e9/20230318173554.png"></p>
<h2 id="配置v2ray"><a href="#配置v2ray" class="headerlink" title="配置v2ray"></a>配置v2ray</h2><p>添加配置文件 <code>/usr/local/etc/v2ray/config-ss.json</code>，v2ray使用的服务就是ss的socks端口</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;log&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;loglevel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;warning&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;routing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;domainStrategy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AsIs&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;direct&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;domain&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;geosite:cn&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;direct&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;geoip:private&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;geoip:cn&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;inbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;listen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1089&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;socks&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;auth&quot;</span><span class="punctuation">:</span> <span class="string">&quot;noauth&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;udp&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;listen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8889&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">12340</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dokodemo-door&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;network&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tcp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;followRedirect&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sniffing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;destOverride&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;http&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;tls&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;streamSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;sockopt&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;mark&quot;</span><span class="punctuation">:</span> <span class="number">255</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;outbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;proxy&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;socks&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;servers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">1080</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;streamSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;network&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tcp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sockopt&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;mark&quot;</span><span class="punctuation">:</span> <span class="number">255</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;direct&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;freedom&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;domainStrategy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UseIP&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;streamSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;sockopt&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;mark&quot;</span><span class="punctuation">:</span> <span class="number">255</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>然后执行 <code>systemctl enable --now v2ray@config-ss.service</code> 启用并运行v2ray服务，完成后也检测一下</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/3616682ebd2a8d1bbc718f88dbc5d16b/20230318173606.png" alt="3616682ebd2a8d1bbc718f88dbc5d16b/20230318173606.png"></p>
<h2 id="配置iptables"><a href="#配置iptables" class="headerlink" title="配置iptables"></a>配置iptables</h2><p>添加iptables规则</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新chain</span></span><br><span class="line">iptables -t nat -N V2RAY</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略ss服务器地址</span></span><br><span class="line">iptables -t nat -A V2RAY -d ss-ip -j RETURN</span><br><span class="line"><span class="comment"># cloudflared</span></span><br><span class="line">iptables -t nat -A V2RAY -d 198.41.0.0/16 -j RETURN</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略局域网和其他一些保留地址</span></span><br><span class="line">iptables -t nat -A V2RAY -d 0.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t nat -A V2RAY -d 10.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t nat -A V2RAY -d 100.64.0.0/10 -j RETURN</span><br><span class="line">iptables -t nat -A V2RAY -d 127.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t nat -A V2RAY -d 169.254.0.0/16 -j RETURN</span><br><span class="line">iptables -t nat -A V2RAY -d 172.16.0.0/12 -j RETURN</span><br><span class="line">iptables -t nat -A V2RAY -d 192.168.0.0/16 -j RETURN</span><br><span class="line">iptables -t nat -A V2RAY -d 198.18.0.0/15 -j RETURN</span><br><span class="line">iptables -t nat -A V2RAY -d 224.0.0.0/4 -j RETURN</span><br><span class="line">iptables -t nat -A V2RAY -d 240.0.0.0/4 -j RETURN</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直连 SO_MARK 为 0xff 的流量(0xff 是 16 进制数，数值上等同与上面配置的 255)，此规则目的是避免代理本机(网关)流量出现回环问题</span></span><br><span class="line">iptables -t nat -A V2RAY -p tcp -j RETURN -m mark --mark 0xff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他流量转发到 12340</span></span><br><span class="line">iptables -t nat -A V2RAY -p tcp -j REDIRECT --to-ports 12340</span><br><span class="line"></span><br><span class="line"><span class="comment">#最后让从内网发的TCP流量，以及从本机发的TCP流量，均经过V2RAY链的判定处理</span></span><br><span class="line">iptables -t nat -A PREROUTING -p tcp -j V2RAY</span><br><span class="line">iptables -t nat -A OUTPUT -p tcp -j V2RAY</span><br></pre></td></tr></table></figure>

<p>安装 <code>iptables-persistent</code> 保存配置，重启后依旧生效，如果需要重新保存，执行 <code>dpkg-reconfigure iptables-persistent</code></p>
<p>这时候linux软路由上的透明代理就配置好了，现在linux上的流量都会经过v2ray，测试一下，curl没有指定socks代理服务器的情况下也访问成功了</p>
<p><img src="https://gcore.jsdelivr.net/gh/lorzzn/storage@main/images/picgo/d31891bb509761a0cd98eb220b8e3c47/20230318173622.png" alt="d31891bb509761a0cd98eb220b8e3c47/20230318173622.png"></p>
<h1 id="开启wifi热点"><a href="#开启wifi热点" class="headerlink" title="开启wifi热点"></a>开启wifi热点</h1><p>安装 <code>network-manager</code> ，并确保wifi设备驱动正常</p>
<h2 id="获取wifi设备"><a href="#获取wifi设备" class="headerlink" title="获取wifi设备"></a>获取wifi设备</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip <span class="built_in">link</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">2: bond0: &lt;BROADCAST,MULTICAST,MASTER&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 4a:1f:02:96:f1:67 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">3: dummy0: &lt;BROADCAST,NOARP&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 46:c1:25:c8:93:ca brd ff:ff:ff:ff:ff:ff</span><br><span class="line">4: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:11:22:33:44:55 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">5: wlan0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq state DOWN mode DORMANT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 84:21:f1:97:35:5f brd ff:ff:ff:ff:ff:ff</span><br><span class="line">6: p2p0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq state DOWN mode DORMANT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 86:21:f1:97:35:5f brd ff:ff:ff:ff:ff:ff</span><br><span class="line">7: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN mode DEFAULT group default</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:b9:d4:2b:72 brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure>

<p>其中wlan0是我的wifi设备</p>
<h3 id="创建热点"><a href="#创建热点" class="headerlink" title="创建热点"></a>创建热点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分别配置热点设备、名称、密码，然后创建新热点配置</span></span><br><span class="line">IFNAME=<span class="string">&quot;wlan0&quot;</span>; CON_NAME=<span class="string">&quot;linux-ap&quot;</span>; CON_PASSWORD=<span class="string">&quot;password&quot;</span></span><br><span class="line">nmcli con add <span class="built_in">type</span> wifi ifname <span class="variable">$IFNAME</span> con-name <span class="variable">$CON_NAME</span> autoconnect <span class="built_in">yes</span> ssid <span class="variable">$CON_NAME</span></span><br><span class="line"><span class="comment"># 将连接方法设置为共享</span></span><br><span class="line">nmcli con modify <span class="variable">$CON_NAME</span> 802-11-wireless.mode ap 802-11-wireless.band <span class="built_in">bg</span> ipv4.method shared</span><br><span class="line"><span class="comment"># 设置热点密码</span></span><br><span class="line">nmcli con modify <span class="variable">$CON_NAME</span> wifi-sec.key-mgmt wpa-psk</span><br><span class="line">nmcli con modify <span class="variable">$CON_NAME</span> wifi-sec.psk <span class="variable">$CON_PASSWORD</span></span><br><span class="line"><span class="comment"># 启动热点</span></span><br><span class="line">nmcli con up <span class="variable">$CON_NAME</span></span><br></pre></td></tr></table></figure>

<p>现在就可以用手机连接上面创建的热点测试一下了</p>
<!-- flag of hidden posts -->]]></content>
  </entry>
  <entry>
    <title>Linux搭建PiNode</title>
    <url>/p/5791d3c.html</url>
    <content><![CDATA[<h2 id="端口测试容器"><a href="#端口测试容器" class="headerlink" title="端口测试容器"></a>端口测试容器</h2><p>等待ping通后按ctrl+c退出，然后下一步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name stellar-dummy -it --<span class="built_in">rm</span> -p 31400-31410:31400-31410 -e PORTS=31400,31401,31402,31403,31404,31405,31406,31407,31408,31409 ese7en/node-port-test:latest</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="pinode节点容器"><a href="#pinode节点容器" class="headerlink" title="pinode节点容器"></a>pinode节点容器</h2><p>docker inspect</p>
<table>
<thead>
<tr>
<th>Environment</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>POSTGRES_PASSWORD</td>
<td>e6Knf2usKtNDVeCB9N0U</td>
</tr>
<tr>
<td>PATH</td>
<td>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</td>
</tr>
<tr>
<td>STELLAR_CORE_VERSION</td>
<td>15.2.0-440.54b03f7.xenial</td>
</tr>
<tr>
<td>HORIZON_VERSION</td>
<td>1.13.1-94</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>Mounts</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>/VAR/LOG/SUPERVISOR</td>
<td>C:\Users\eavel\AppData\Roaming\Pi Network\docker_volumes\supervisor_logs</td>
</tr>
<tr>
<td>/HISTORY</td>
<td>C:\Users\eavel\AppData\Roaming\Pi  Network\docker_volumes\history</td>
</tr>
<tr>
<td>/OPT/STELLAR</td>
<td>C:\Users\eavel\AppData\Roaming\Pi  Network\docker_volumes\stellar</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>Ports</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>1570/tcp</td>
<td>0.0.0.0:31403</td>
</tr>
<tr>
<td>31402/tcp</td>
<td>0.0.0.0:31402</td>
</tr>
<tr>
<td>5432/tcp</td>
<td>Not bound</td>
</tr>
<tr>
<td>8000/tcp</td>
<td>0.0.0.0:31401</td>
</tr>
</tbody></table>
<blockquote>
<p>参考</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name pi-consensus -p 1570:31403 -p 31402:31402 -p 8000:31401 -v /data/pinode/stellar:/opt/stellar -v /data/pinode/supervisor_logs:/var/log/supervisor -v /data/pinode/history:/history pinetwork/pi-node-docker:latest</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PIVOL_PATH=<span class="string">&quot;/c/Users/fxuser/AppData/Roaming/Pi Network/docker_volumes&quot;</span>; docker run -d --name pi-consensus -p 1570:31403 -p 31402:31402 -p 8000:31401 -e POSTGRES_PASSWORD=e6Knf2usKtNDVeCB9N0U -e STELLAR_CORE_VERSION=15.2.0-440.54b03f7.xenial -e HORIZON_VERSION=1.13.1-94 -v <span class="string">&quot;<span class="variable">$PIVOL_PATH</span>/stellar:/opt/stellar&quot;</span> -v <span class="string">&quot;<span class="variable">$PIVOL_PATH</span>/supervisor_logs:/var/log/supervisor&quot;</span> -v <span class="string">&quot;<span class="variable">$PIVOL_PATH</span>/history:/history&quot;</span> pinetwork/pi-node-docker:latest</span><br></pre></td></tr></table></figure>

<h2 id="For-test"><a href="#For-test" class="headerlink" title="For test"></a>For test</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker container <span class="built_in">rm</span> pi-consensus;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker container <span class="built_in">rm</span> pi-consensus; <span class="built_in">export</span> PIVOL_PATH=<span class="string">&quot;/c/Users/fxuser/AppData/Roaming/Pi Network/docker_volumes&quot;</span>; docker run -it --name pi-consensus -p 1570:31403 -p 31402:31402 -p 8000:31401 -e POSTGRES_PASSWORD=e6Knf2usKtNDVeCB9N0U -e STELLAR_CORE_VERSION=15.2.0-440.54b03f7.xenial -e HORIZON_VERSION=1.13.1-94 -v <span class="string">&quot;<span class="variable">$PIVOL_PATH</span>/stellar:/opt/stellar&quot;</span> -v <span class="string">&quot;<span class="variable">$PIVOL_PATH</span>/supervisor_logs:/var/log/supervisor&quot;</span> -v <span class="string">&quot;<span class="variable">$PIVOL_PATH</span>/history:/history&quot;</span> pinetwork/pi-node-docker:latest</span><br></pre></td></tr></table></figure>

<!-- flag of hidden posts -->]]></content>
      <categories>
        <category>pinode</category>
      </categories>
      <tags>
        <tag>pinode</tag>
      </tags>
  </entry>
  <entry>
    <title>关于我</title>
    <url>/about/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>friends</title>
    <url>/friends/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>相册</title>
    <url>/photos/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
